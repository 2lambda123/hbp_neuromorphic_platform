{"version":3,"sources":["main.js","app/app.module.js","automator/automator.module.js","collab/collab.module.js","env/env.module.js","error/error.module.js","form/form.module.js","identity/identity.module.js","storage/storage.module.js","rest/rest.module.js","stream/stream.module.js","app/app.service.js","app/bootstrap.js","automator/automator.service.js","automator/create-collab.task.js","automator/create-nav-item.task.js","automator/overview.task.js","automator/storage.task.js","collab/clb-collab-app.service.js","collab/collab-nav.service.js","collab/collab-team-role.service.js","collab/collab-team.service.js","collab/collab.model.js","collab/collab.service.js","collab/context.model.js","collab/context.service.js","env/env.provider.js","error/error.service.js","form/form-control-focus.directive.js","form/form-group-state.directive.js","identity/user.service.js","identity/util.js","storage/storage.service.js","rest/pagination.service.js","stream/activity.directive.js","stream/feed.directive.js","stream/resource-locator.provider.js","stream/stream.service.js"],"names":[],"mappings":"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","file":"angular-hbp-collaboratory.js","sourcesContent":["/**\n * @namespace hbpCollaboratory\n * @desc\n * ``hbpCollaboratory`` module is a shell around various AngularJS modules that\n *  interface with the HBP Collaboratory.\n *\n * - :doc:`clb-app <module:clb-app>` provides utilities to retrieve current\n *   HBP Collaboratory Context in an app and to communicate with the current\n *   Collaboratory instance.\n * - :doc:`clb-automator <module:clb-automator>` to automate a serie of\n *   Collaboratory actions.\n * - :doc:`clb-feed <module:clb-feed>` retrieve and display stream of activities.\n */\nangular.module('hbpCollaboratory', [\n  'ngLodash',\n  'clb-automator',\n  'clb-env',\n  'clb-error',\n  'clb-app',\n  'clb-storage',\n  'clb-collab',\n  'clb-form',\n  'clb-stream',\n  'clb-identity',\n  'clb-collab'\n]).run(function(lodash) {\n  // keep lodash compatibility with older versions\n  if (!lodash.indexBy) {\n    lodash.indexBy = lodash.keyBy;\n  }\n  if (!lodash.keyBy) {\n    lodash.keyBy = lodash.indexBy;\n  }\n});\n","/**\n * @module clb-app\n * @desc\n * ``clb-app`` module provides utilities to retrieve current\n * HBP Collaboratory Context in an app and to communicate with the current\n * Collaboratory instance.\n *\n * This module must be bootstraped using ``angular.clbBootstrap`` function as\n * it needs to load the global environment loaded in CLB_ENBIRONMENT angular\n * constant.\n */\nangular.module('clb-app', ['clb-env', 'clb-error']);\n","/**\n * @module clb-automator\n * @desc\n * `clb-automator` module provides an automation library for the Collaboratory\n * using the AngularJS service :ref:`clbAutomator <module-clb-automator.clbAutomator>`.\n * It supports object describing a serie of actions that have to be run\n * either concurrently or sequentially.\n *\n * It is used for example to script the creation of new custom collab in\n * the `Create New Collab` functionality in `collaboratory-extension-core`.\n */\nangular.module('clb-automator', [\n  'clb-env',\n  'clb-error',\n  'clb-collab',\n  'clb-storage'\n]);\n","/**\n * @module clb-collab\n * @desc\n * Contain services to interact with collabs (e.g.: retriving collab informations or\n * team members).\n */\nangular.module('clb-collab', [\n  'ngLodash',\n  'clb-env',\n  'clb-error',\n  'clb-identity',\n  'clb-rest',\n  'uuid4'\n]);\n","/**\n * @module clb-env\n * @desc\n * ``clb-env`` module provides a way to information from the global environment.\n */\n\nangular.module('clb-env', []);\n","angular.module('clb-error', []);\n","/**\n * @module clb-form\n * @desc\n * clb-form provides directive to ease creation of forms.\n */\nangular.module('clb-form', []);\n","angular.module('clb-identity', [\n  'ngLodash',\n  'clb-env',\n  'clb-error',\n  'clb-rest'\n]);\n","/**\n * @module clb-storage\n */\nangular.module('clb-storage', [\n  'uuid4',\n  'clb-error',\n  'clb-env',\n  'clb-rest'\n]);\n","/**\n * @module clb-rest\n * @desc\n * ``clb-rest`` module contains util for simplifying access to Rest service.\n */\nangular.module('clb-rest', ['clb-error']);\n","/**\n * @module clb-stream\n * @desc\n * The `clb-stream` module contains a service and a few directives to retrieve\n * and display the HBP Collaboratory stream provided\n * by the various applications.\n */\n\nangular.module('clb-stream', [\n  'clb-env',\n  'clb-error',\n  'clb-rest',\n  'angularMoment'\n]);\n","angular.module('clb-app')\n.factory('clbApp', clbApp);\n\n/**\n * @namespace clbApp\n * @memberof module:clb-app\n * @desc\n * An AngularJS service to interface a web application with the HBP Collaboratory.\n * This library provides a few helper to work within the Collaboratory environment.\n *\n * Usage\n * -----\n *\n * - :ref:`module-clb-app.clbApp.context` is used to set and retrieve\n *   the current context.\n * - :ref:`module-clb-app.clbApp.emit` is used to send a command\n *   to the HBP Collaboratory and wait for its answer.\n *\n * @example <caption>Retrieve the current context object</caption>\n * clbApp.context()\n * .then(function(context) {\n *   console.log(context.ctx, context.state, context.collab);\n * })\n * .catch(function(err) {\n *   // Cannot set the state\n * });\n *\n * @example <caption>Set the current state in order for a user to be able to copy-paste its current URL and reopen the same collab with your app loaded at the same place.</caption>\n * clbApp.context({state: 'lorem ipsum'})\n * .then(function(context) {\n *   console.log(context.ctx, context.state, context.collab);\n * })\n * .catch(function(err) {\n *   // Cannot set the state\n * });\n *\n * @param  {object} $q AngularJS service injection\n * @param  {object} $rootScope AngularJS service injection\n * @param  {object} $timeout AngularJS service injection\n * @param  {object} $window AngularJS service injection\n * @param  {object} clbError AngularJS service injection\n * @return {object}         the service singleton\n */\nfunction clbApp(\n  $q,\n  $rootScope,\n  $timeout,\n  $window,\n  clbError\n) {\n  var eventId = 0;\n  var sentMessages = {};\n\n  /**\n   * Singleton class\n   */\n  function AppToolkit() { }\n  AppToolkit.prototype = {\n    emit: emit,\n    context: context\n  };\n\n  $window.addEventListener('message', function(event) {\n    $rootScope.$emit('message', event.data);\n  });\n\n  $rootScope.$on('message', function(event, message) {\n    if (!message || !message.origin || !sentMessages[message.origin]) {\n      return;\n    }\n    if (message.eventName === 'resolved') {\n      sentMessages[message.origin].resolve(message.data);\n    } else if (message.eventName === 'error') {\n      sentMessages[message.origin].reject(clbError.error(message.data));\n    }\n    sentMessages[message.origin] = null;\n  });\n\n  /**\n   * Send a message to the HBP Collaboratory.\n   * @memberof module:clb-app.clbApp\n   * @param  {string} name name of the event to be propagated\n   * @param  {object} data corresponding data to be sent alongside the event\n   * @return  {Promise} resolve with the message response\n   */\n  function emit(name, data) {\n    eventId++;\n    sentMessages[eventId] = $q.defer();\n    var promise = sentMessages[eventId].promise;\n    $window.parent.postMessage({\n      apiVersion: 1,\n      eventName: name,\n      data: data,\n      ticket: eventId\n    }, '*');\n    return promise;\n  }\n\n  var currentContext;\n\n  /**\n   * @typedef HbpCollaboratoryContext\n   * @memberof module:clb-app.clbApp\n   * @type {object}\n   * @property {string} mode - the current mode, either 'run' or 'edit'\n   * @property {string} ctx - the UUID of the current context\n   * @property {string} state - an application defined state string\n   */\n\n   /**\n    * @memberof module:clb-app.clbApp\n    * @desc\n    * Asynchronously retrieve the current HBP Collaboratory Context, including\n    * the mode, the ctx UUID and the application state if any.\n    * @function context\n    * @param {object} data new values to send to HBP Collaboratory frontend\n    * @return {Promise} resolve to the context\n    * @static\n    */\n  function context(data) {\n    var d = $q.defer();\n    var kill = $timeout(function() {\n      d.reject(clbError.error({\n        type: 'TimeoutException',\n        message: 'No context can be retrieved'\n      }));\n    }, 250);\n\n    if (data) {\n      // discard context if new data should be set.\n      currentContext = null;\n    }\n\n    if (currentContext) {\n      // directly return context when cached.\n      return d.resolve(currentContext);\n    }\n    emit('workspace.context', data)\n    .then(function(context) {\n      $timeout.cancel(kill);\n      currentContext = context;\n      d.resolve(context);\n    })\n    .catch(function(err) {\n      d.reject(clbError.error(err));\n    });\n    return d.promise;\n  }\n  return new AppToolkit();\n}\n","/* global deferredBootstrapper, window, document */\nangular.clbBootstrap = clbBootstrap;\n\n/**\n * Bootstrap AngularJS application with the environment configuration loaded.\n * @param {string} module the name of the Angular application module to load.\n * @param {objects} options pass those options to deferredBootstrap\n * @return {Promise} return once the environment has been bootstrapped\n */\nfunction clbBootstrap(module, options) {\n  if (window.bbpConfig) {\n    options.env = window.bbpConfig;\n  }\n  if (!options.element) {\n    options.element = document.body;\n  }\n  options.module = module;\n  if (!options.moduleResolves) {\n    options.moduleResolves = {};\n  }\n  options.moduleResolves = [{\n    module: 'clb-env',\n    resolve: {\n      // use injection here as it is not resolved automatically on build.\n      CLB_ENVIRONMENT: ['$q', '$http', function($q, $http) {\n        // Remove any previously defined CLB_ENVIRONMENT\n        // As this results in unpredictable results when multiple apps\n        // use this strategy.\n        var invoker = angular.module(['clb-env'])._invokeQueue;\n        for (var i = 0; i < invoker.length; i++) {\n          var inv = invoker[i];\n          if (inv[2][0] === 'CLB_ENVIRONMENT') {\n            invoker.splice(i, 1);\n            i--;\n          }\n        }\n        if (angular.isString(options.env)) {\n          return $http.get(options.env)\n          .then(function(res) {\n            // Set bbpConfig for backward compatibility\n            window.bbpConfig = res.data;\n            return res.data;\n          });\n        }\n        // Set bbpConfig for backward compatibility\n        if (!window.bbpConfig) {\n          window.bbpConfig = options.env;\n        }\n        return $q.when(options.env);\n      }]\n    }\n  }];\n  return deferredBootstrapper.bootstrap(options);\n}\n","angular.module('clb-automator')\n.factory('clbAutomator', clbAutomator);\n\n/**\n * @namespace Tasks\n * @memberof module:clb-automator\n * @desc\n * Document a list of available tasks.\n */\n\n/**\n * @namespace clbAutomator\n * @memberof module:clb-automator\n * @desc\n * clbAutomator is an AngularJS factory that\n * provide task automation to accomplish a sequence of\n * common operation in Collaboratory.\n *\n * How to add new tasks\n * --------------------\n *\n * New tasks can be added by calling ``clbAutomator.registerHandler``.\n *\n * You can see a few example of tasks in the `tasks` folder.\n *\n * Evaluate the automator\n * ----------------------\n *\n * From the root of this project, you can start a server that will let\n * you write a descriptor and run it.\n *\n * .. code-block:: bash\n *\n *    gulp example\n *\n * @example <caption>Create a Collab with a few navigation items</caption>\n * // Create a Collab with a few navigation items.\n * angular.module('MyModule', ['clb-automator'])\n * .run(function(clbAutomator, $log) {\n *   var config = {\n *     title: 'My Custom Collab',\n *     content: 'My Collab Content',\n *     private: false\n *   };\n *   clbAutomator.task(config).run().then(function(collab) {\n *   \t $log.info('Created Collab', collab);\n *   });\n * })\n * @example <caption>Create a Collab with entities and navigation items</caption>\n * clbAutomator.run({\n *   \"collab\": {\n *     \"title\": \"Test Collab Creation\",\n *     \"content\": \"My Collab Description\",\n *     \"private\": true,\n *     \"after\": [\n *       {\n *         \"storage\": {\n *           \"entities\": {\n *             // Use one of your file UUID here.\n *             \"sample.ipynb\": \"155c1bcc-ee9c-43e2-8190-50c66befa1fa\"\n *           },\n *           \"after\": [{\n *             \"nav\": {\n *               \"name\": \"Example Code\",\n *               \"app\": \"Jupyter Notebook\",\n *               \"entity\": \"sample.ipynb\"\n *             }\n *           }]\n *         }\n *       },\n *       {\n *         \"nav\": {\n *           \"name\": \"Empty Notebook\",\n *           \"app\": \"Jupyter Notebook\"\n *         }\n *       },\n *       {\n *         \"nav\": {\n *           \"name\": \"Introduction\",\n *           \"app\": \"Rich Text Editor\"\n *         }\n *       }\n *     ]\n *   }\n * }).then(function(collab) {\n *   $log.info('Created Collab', collab);\n * });\n *\n * @example <caption>Create a Collab with a pre-filled overview</caption>\n * clbAutomator.run({\n *   \"collab\": {\n *     \"title\": \"Test Collab With Pre Filled Overview\",\n *     \"content\": \"Test collab creation with  a pre filled overview\",\n *     \"private\": true,\n *     \"after\": [{\n *       \"overview\": {\n *         // Use one of your HTML file UUID here.\n *         \"entity\": \"155c1bcc-ee9c-43e2-8190-50c66befa1fa\"\n *       }\n *     }]\n *   }\n * }).then(function(collab) {\n *   $log.info('Created Collab', collab);\n * });\n * @param {object} $q injected service\n * @param {object} $log injected service\n * @param {object} clbError injected service\n * @return {object} the clbAutomator Angular service singleton\n */\nfunction clbAutomator(\n  $q,\n  $log,\n  clbError\n) {\n  var handlers = {};\n\n  /**\n   * Register a handler function for the given task name.\n   * @memberof module:clb-automator.clb-automator\n   * @param  {string}   name handle actions with the specified name\n   * @param  {Function} fn a function that accept the current context in\n   *                       parameter.\n   */\n  function registerHandler(name, fn) {\n    handlers[name] = fn;\n  }\n\n  /**\n   * Instantiate a new Task intance that will run the code describe for\n   * a handlers with the give ``name``.\n   *\n   * The descriptor is passed to the task and parametrize it.\n   * The task context is computed at the time the task is ran. A default context\n   * can be given at load time and it will be fed with the result of each parent\n   * (but not sibling) tasks as well.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param {string} name the name of the task to instantiate\n   * @param {object} [descriptor] a configuration object that will determine\n   *                            which task to run and in which order\n   * @param {object} [descriptor.after] an array of task to run after this one\n   * @param {object} [context] a default context to run the task with\n   *\n   * @return {Task} - the new task instance\n   */\n  function task(name, descriptor, context) {\n    try {\n      return new Task(name, descriptor, context);\n    } catch (ex) {\n      $log.error('EXCEPTION', ex);\n      throw clbError.error({\n        type: 'InvalidTask',\n        message: 'Invalid task ' + name + ': ' + ex,\n        data: {\n          cause: ex,\n          name: name,\n          descriptor: descriptor,\n          context: context\n        }\n      });\n    }\n  }\n\n  /**\n   * Directly generate tasks from given description and run them.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} descriptor description of the tasks to run\n   * @param  {object} [context]  the initial context\n   * @return {Promise} promise of the top level task result\n   */\n  function run(descriptor, context) {\n    for (var name in descriptor) {\n      if (descriptor.hasOwnProperty(name)) {\n        return task(name, descriptor[name], context).run();\n      }\n    }\n    return $q.reject(clbError.error({\n      type: 'NoTaskFound',\n      message: 'No task found in descriptor',\n      data: descriptor\n    }));\n  }\n\n  /**\n   * Create an array of tasks given an array containing object where\n   * the key is the task name to run and the value is the descriptor\n   * parameter.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} after the content of ``descriptor.after``\n   * @return {Array/Task} array of subtasks\n   * @private\n   */\n  function createSubtasks(after) {\n    var subtasks = [];\n    if (!after || !after.length) {\n      return subtasks;\n    }\n    for (var i = 0; i < after.length; i++) {\n      var taskDef = after[i];\n      for (var name in taskDef) {\n        if (taskDef.hasOwnProperty(name)) {\n          subtasks.push(task(name, taskDef[name]));\n        }\n      }\n    }\n    return subtasks;\n  }\n\n  /**\n   * @class Task\n   * @memberof module:clb-automator.clbAutomator\n   * @desc\n   * Instantiate a task given the given `config`.\n   * The task can then be run using the `run()` instance method.\n   * @param {string} name the name of the task to instantiate\n   * @param {object} [descriptor] a configuration object that will determine\n   *                            which task to run and in which order\n   * @param {object} [descriptor.after] an array of task to run after this one\n   * @param {object} [context] a default context to run the task with\n   * @see module:clb-automator.task\n   *\n   */\n  function Task(name, descriptor, context) {\n    if (!handlers[name]) {\n      throw new Error('TaskNotFound');\n    }\n    descriptor = descriptor || {};\n    context = context || {};\n    this.state = 'idle';\n    this.name = name;\n    this.descriptor = descriptor;\n    this.defaultContext = context;\n    this.state = 'idle';\n    this.promise = null;\n    this.error = null;\n    this.subtasks = createSubtasks(descriptor.after);\n  }\n\n  Task.prototype = {\n    /**\n     * Launch the task.\n     *\n     * @memberof module:clb-automator.clbAutomator.Task\n     * @param {object} context current context will be merged into the default\n     *                         one.\n     * @return {Promise} promise to return the result of the task\n     */\n    run: function(context) {\n      var self = this;\n      // run an intance of task only once.\n      if (self.state !== 'idle') {\n        return self.promise;\n      }\n      context = angular.extend({}, this.defaultContext, context);\n      var onSuccess = function(result) {\n        var subContext = angular.copy(context);\n        subContext[self.name] = result;\n        return self.runSubtasks(subContext)\n        .then(function() {\n          self.state = 'success';\n          return result;\n        });\n      };\n      var onError = function(err) {\n        self.state = 'error';\n        // noop operation if is already one\n        return $q.reject(clbError.error(err));\n      };\n      self.state = 'progress';\n      self.promise = $q.when(handlers[self.name](self.descriptor, context))\n        .then(onSuccess)\n        .catch(onError);\n      return self.promise;\n    },\n\n    /**\n     * Run all subtasks of the this tasks.\n     *\n     * @memberof module:clb-automator.clbAutomator.Task\n     * @param  {object} context the current context\n     * @return {Array}          all the results in an array\n     */\n    runSubtasks: function(context) {\n      var promises = [];\n      angular.forEach(this.subtasks, function(task) {\n        promises.push(task.run(context));\n      });\n      return $q.all(promises);\n    }\n  };\n\n  /**\n   * Return a HbpError when a parameter is missing.\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {string} key    name of the key\n   * @param  {object} config the invalid configuration object\n   * @return {HbpError}      a HbpError instance\n   * @private\n   */\n  function missingDataError(key, config) {\n    return clbError({\n      type: 'KeyError',\n      message: 'Missing `' + key + '` key in config',\n      data: {\n        config: config\n      }\n    });\n  }\n\n  /**\n   * Ensure that all parameters listed after config are presents.\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} config task descriptor\n   * @return {object} created entities\n   */\n  function ensureParameters(config) {\n    var parameters = Array.prototype.splice(1);\n    for (var p in parameters) {\n      if (angular.isUndefined(parameters[p])) {\n        return $q.reject(missingDataError(p, config));\n      }\n    }\n    return $q.when(config);\n  }\n\n  /**\n   * Return an object that only contains attributes\n   * from the `attrs` list.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} config key-value store\n   * @param  {Array} attrs   a list of keys to extract from `config`\n   * @return {object}        key-value store containing only keys from attrs\n   *                         found in `config`\n   */\n  function extractAttributes(config, attrs) {\n    var r = {};\n    angular.forEach(attrs, function(a) {\n      if (angular.isDefined(config[a])) {\n        r[a] = config[a];\n      }\n    });\n    return r;\n  }\n\n  return {\n    run: run,\n    task: task,\n    handlers: handlers,\n    registerHandler: registerHandler,\n    extractAttributes: extractAttributes,\n    ensureParameters: ensureParameters\n  };\n}\n","angular.module('clb-automator')\n.run(function createCollab(\n  $log,\n  $q,\n  clbCollab,\n  clbAutomator\n) {\n  clbAutomator.registerHandler('collab', createCollab);\n\n  /**\n   * @function createCollab\n   * @memberof module:clb-automator.Tasks\n   * @desc\n   *  Create a collab defined by the given options.\n   * @param {object} descriptor - Parameters to create the collab\n   * @param {string} descriptor.name - Name of the collab\n   * @param {string} descriptor.description - Description in less than 140 characters\n   *                                       of the collab\n   * @param {string} [descriptor.privacy] - 'private' or 'public'. Notes that only\n   *                                   HBP Members can create private collab\n   * @param {Array} [after] - descriptor of subtasks\n   * @return {Promise} - promise of a collab\n   */\n  function createCollab(descriptor) {\n    var attr = clbAutomator.extractAttributes(\n      descriptor,\n      ['title', 'content', 'private']\n    );\n    $log.debug('Create collab', descriptor);\n    return clbCollab.create(attr);\n  }\n});\n","angular.module('clb-automator')\n.run(function createNavItem(\n  $log,\n  clbCollabApp,\n  clbCollabNav,\n  clbAutomator,\n  clbStorage\n) {\n  clbAutomator.registerHandler('nav', createNavItem);\n\n  /**\n   * Create a new nav item.\n   * @memberof module:clb-automator.Tasks\n   * @param {object} descriptor a descriptor description\n   * @param {string} descriptor.name name of the nav item\n   * @param {Collab} descriptor.collabId collab in which to add the item in.\n   * @param {string} descriptor.app app name linked to the nav item\n   * @param {object} [context] the current run context\n   * @param {object} [context.collab] a collab instance created previously\n   * @return {Promise} promise of a NavItem instance\n   */\n  function createNavItem(descriptor, context) {\n    var collabId = function() {\n      return (descriptor && descriptor.collab) ||\n        (context && context.collab.id);\n    };\n    var findApp = function(app) {\n      return clbCollabApp.findOne({title: app});\n    };\n    var createNav = function(app) {\n      return clbCollabNav.getRoot(collabId())\n      .then(function(parentItem) {\n        return clbCollabNav.addNode(collabId(),\n          new clbCollabNav.NavItem({\n            collab: collabId(),\n            name: descriptor.name,\n            appId: app.id,\n            parentId: parentItem.id\n          })\n        );\n      });\n    };\n    var linkToStorage = function(nav) {\n      if (!descriptor.entity) {\n        return nav;\n      }\n      var setLink = function(entity) {\n        return clbStorage.setContextMetadata(entity, nav.context)\n        .then(function() {\n          return nav;\n        });\n      };\n      // It might be the name used in a previous storage task.\n      if (context && context.storage && context.storage[descriptor.entity]) {\n        return setLink(context.storage[descriptor.entity]);\n      }\n      return clbStorage.getEntity(descriptor.entity).then(setLink);\n    };\n\n    $log.debug('Create nav item', descriptor, context);\n\n    return clbAutomator.ensureParameters(descriptor, 'app', 'name')\n    .then(function() {\n      return findApp(descriptor.app)\n      .then(createNav)\n      .then(linkToStorage);\n    });\n  }\n});\n","angular.module('clb-automator')\n.run(function createOverview(\n  $log, $q, $http, clbEnv, clbStorage, clbError,\n  clbAutomator, clbCollabNav, clbCollabApp\n) {\n  clbAutomator.registerHandler('overview', overview);\n\n  /**\n   * Set the content of the overview page.\n   * If an 'entity' is specified, it will use the content of that storage file\n   * If an 'app' name is specified, it will use that app for the overview page\n   *\n   * The collab is indicated either by an id in `descriptor.collab` or a\n   * collab object in `context.collab`.\n   *\n   * @memberof module:clb-automator.Tasks\n   * @param {object} descriptor the task configuration\n   * @param {object} [descriptor.collab] id of the collab\n   * @param {string} [descriptor.entity] either a label that can be found in\n   *                 ``context.entities`` or a FileEntity UUID\n   * @param {string} [descriptor.app] the name of an application\n   * @param {object} context the current task context\n   * @param {object} [context.collab] the collab in which entities will be copied\n   * @param {object} [context.entities] a list of entities to lookup in for\n   *                   descriptor.entiry value\n   * @return {object} created entities where keys are the same as provided in\n   *                  config.storage\n   */\n  function overview(descriptor, context) {\n    $log.debug(\"Set the content of the overview page\");\n    var collabId = descriptor.collab || context.collab.id;\n    var createContentFile = function(overview, descriptor, context) {\n      $log.debug(\"Fill overview page with content from entity\");\n\n      return fetchSourceContent(descriptor, context)\n        .then(function(source) {\n          return $http.post(clbEnv.get('api.richtext.v0') + '/richtext/', {\n            ctx: overview.context,\n            raw: source\n          });\n        });\n    };\n\n    var updateAppId = function(overview, descriptor) {\n      $log.debug(\"Replace the overview page application id\");\n\n      return clbCollabApp.findOne({title: descriptor.app})\n        .then(function(app) {\n          overview.update({appId: app.id});\n          return clbCollabNav.saveNode(collabId, overview);\n        });\n    };\n\n    return clbCollabNav\n      .getRoot(collabId)\n      .then(function(rootNav) {\n        var overview = rootNav.children[0];\n\n        var updateOverview = descriptor.app ?\n          updateAppId(overview, descriptor) :\n          createContentFile(overview, descriptor, context);\n\n        return updateOverview.then(function() {\n          return overview;\n        });\n      });\n  }\n\n  /**\n   * Download file entity content.\n   *\n   * @param {object} descriptor the task configuration\n   * @param {string} descriptor.entity either the label to find in\n   *                 ``context.entities`` or a the entity UUID.\n   * @param {object} context the current task context\n   * @param {object} context.entities optional entities in which to lookup for one\n   * @return {Promise} the promise of the entity content string\n   * @private\n   */\n  function fetchSourceContent(descriptor, context) {\n    var uuid;\n    if (context && context.entities && context.entities[descriptor.entity]) {\n      uuid = context.entities[descriptor.entity]._uuid;\n    } else {\n      uuid = descriptor.entity;\n    }\n    return clbStorage.getContent(uuid);\n  }\n});\n","angular.module('clb-automator')\n.run(function createStorage(\n  $log,\n  $q,\n  clbError,\n  clbAutomator,\n  clbStorage\n) {\n  clbAutomator.registerHandler('storage', storage);\n\n  /**\n   * Copy files and folders to the destination collab storage.\n   *\n   * @memberof module:clb-automator.Tasks\n   * @param {object} descriptor the task configuration\n   * @param {object} descriptor.storage a object where keys are the file path in the\n   *                                new collab and value are the UUID of the\n   *                                entity to copy at this path.\n   * @param {object} [descriptor.collab] id of the collab\n   * @param {object} context the current task context\n   * @param {object} [context.collab] the collab in which entities will be copied\n   * @return {object} created entities where keys are the same as provided in\n   *                  config.storage\n   */\n  function storage(descriptor, context) {\n    return clbAutomator.ensureParameters(\n      descriptor, 'entities'\n    ).then(function() {\n      return clbStorage\n        .getCollabHome(descriptor.collab || context.collab.id)\n        .then(function(projectEntity) {\n          var promises = {};\n          angular.forEach(descriptor.entities, function(value, name) {\n            if (angular.isString(value)) {\n              $log.debug(\"Copy entity with UUID\", value);\n              promises[name] = (\n                clbStorage.copy(value, projectEntity._uuid));\n            } else {\n              $log.warn('Invalid configuration for storage task', descriptor);\n            }\n          });\n          return $q.all(promises);\n        });\n    });\n  }\n});\n","/* eslint camelcase: 0 */\n\n/**\n * @namespace clbCollabApp\n * @memberof module:clb-collab\n * @desc\n * clbCollabApp can be used to find and work with the\n * registered HBP Collaboratory applications.\n */\nangular.module('clb-collab')\n.constant('folderAppId', '__collab_folder__')\n.service('clbCollabApp', function(\n  $q, $http, $cacheFactory,\n  clbError, clbEnv, clbResultSet\n) {\n  var appsCache = $cacheFactory('__appsCache__');\n  var urlBase = clbEnv.get('api.collab.v0') + '/extension/';\n  var apps = null;\n\n  /**\n   * @class App\n   * @desc client representation of an application\n   * @memberof module:clb-collab\n   * @param  {object} [attrs] a list of attributes to set to the App instance\n   */\n  var App = function(attrs) {\n    var self = this;\n    angular.forEach(attrs, function(v, k) {\n      self[k] = v;\n    });\n  };\n  App.prototype = {\n    /**\n     * Transform an App instance into an object reprensentation compatible with\n     * the backend schema. This object can then be easily converted to a JSON\n     * string.\n     * @memberof module:clb-collab.App\n     * @return {object} server representation of an App instance\n     */\n    toJson: function() {\n      return {\n        id: this.id,\n        description: this.description,\n        edit_url: this.editUrl,\n        run_url: this.runUrl,\n        title: this.title\n      };\n    }\n  };\n\n  /**\n   * Create an app instance from a server representation.\n   * @memberof module:clb-collab.App\n   * @param  {object} json converted from the server JSON string\n   * @return {App} the new App instance\n   */\n  App.fromJson = function(json) {\n    /* jshint camelcase: false */\n    return new App({\n      id: json.id,\n      deleted: json.deleted,\n      description: json.description,\n      editUrl: json.edit_url,\n      runUrl: json.run_url,\n      title: json.title,\n      createdBy: json.created_by\n    });\n  };\n\n  appsCache.put('__collab_folder__', {\n    id: '__collab_folder__',\n    title: 'Folder'\n  });\n\n  var loadAll = function(promise) {\n    return promise.then(function(rs) {\n      if (rs.hasNext) {\n        return loadAll(rs.next());\n      }\n      apps = rs.results;\n      return apps;\n    });\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabApp\n   * @return {Promise} promise of the list of all applications\n   */\n  var list = function() {\n    if (!apps) {\n      return loadAll(clbResultSet.get($http.get(urlBase), {\n        factory: App.fromJson\n      }));\n    }\n    return $q.when(apps);\n  };\n\n  /**\n   * Retrieve an App instance from its id.\n   * @memberof module:clb-collab.clbCollabApp\n   * @param  {number} id the app id\n   * @return {Promise} promise of an app instance\n   */\n  var getById = function(id) {\n    if (!id) {\n      return $q.when(null);\n    }\n    var ext = appsCache.get(id);\n    if (ext) {\n      return $q.when(ext);\n    }\n    return $http.get(urlBase + id + '/').then(function(res) {\n      appsCache.put(id, App.fromJson(res.data));\n      return appsCache.get(id);\n    }, function(res) {\n      return $q.reject(clbError.httpError(res));\n    });\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabApp\n   * @param  {object} params query parameters\n   * @return {Promise} promise of an App instance\n   */\n  var findOne = function(params) {\n    return $http.get(urlBase, {params: params}).then(function(res) {\n      var results = res.data.results;\n      // Reject if more than one results\n      if (results.length > 1) {\n        return $q.reject(clbError.error({\n          type: 'TooManyResults',\n          message: 'Multiple apps has been retrieved ' +\n                   'when only one was expected.',\n          data: res.data\n        }));\n      }\n      // Null when no result\n      if (results.length === 0) {\n        return null;\n      }\n      // Build the app if exactly one result\n      var app = App.fromJson(results[0]);\n      appsCache.put(app.id, app);\n      return app;\n    }, clbError.rejectHttpError);\n  };\n\n  return {\n    list: list,\n    getById: getById,\n    findOne: findOne\n  };\n});\n","/* eslint camelcase:[2, {properties: \"never\"}] */\n\n/**\n * @namespace clbCollabNav\n * @memberof module:clb-collab\n * @desc clbCollabNav provides tools to create and manage\n *       navigation items.\n */\nangular.module('clb-collab')\n.service('clbCollabNav', function($q, $http, $log,\n    $cacheFactory, $timeout, orderByFilter, uuid4,\n    clbEnv, clbError) {\n  var collabApiUrl = clbEnv.get('api.collab.v0') + '/collab/';\n  // a cache with individual nav items\n  var cacheNavItems = $cacheFactory('navItem');\n\n  // a cache with the promises of each collab's nav tree root\n  var cacheNavRoots = $cacheFactory('navRoot');\n\n  /**\n   * @class NavItem\n   * @desc\n   * Client representation of a navigation item.\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {object} attr attributes of the new instance\n   */\n  var NavItem = function(attr) {\n    var self = this;\n    angular.forEach(attr, function(v, k) {\n      self[k] = v;\n    });\n    if (angular.isUndefined(this.context)) {\n      this.context = uuid4.generate();\n    }\n    if (angular.isUndefined(this.children)) {\n      this.children = [];\n    }\n  };\n  NavItem.prototype = {\n    /**\n     * @desc\n     * Return a server object representation that can be easily serialized\n     * to JSON and send to the backend.\n     * @memberof module:clb-collab.clbCollabNav.NavItem\n     * @return {object} server object representation\n     */\n    toJson: function() {\n      /* jshint camelcase: false */\n      return {\n        id: this.id,\n        app_id: this.appId,\n        collab: this.collabId,\n        name: this.name,\n        context: this.context,\n        order_index: this.order,\n        type: this.type || (this.folder ? 'FO' : 'IT'),\n        parent: this.parentId\n      };\n    },\n    /**\n     * @memberof module:clb-collab.clbCollabNav.NavItem\n     * @param  {object} attrs NavItem instance attributes\n     * @return {NavItemt} this instance\n     */\n    update: function(attrs) {\n      angular.forEach([\n        'id', 'name', 'children', 'context',\n        'collabId', 'appId', 'order', 'folder',\n        'parentId', 'type'\n      ], function(a) {\n        if (angular.isDefined(attrs[a])) {\n          this[a] = attrs[a];\n        }\n      }, this);\n\n      return this;\n    },\n    /**\n     * @memberof module:clb-collab.clbCollabNav.NavItem\n     * @return {NavItem} this instance\n     * @private\n     */\n    ensureCached: function() {\n      cacheNavItems.put(key(this.collabId, this.id), this);\n      return this;\n    }\n  };\n  /**\n   * Manage `acc` accumulator with all the data from jsonArray and return it.\n   *\n   * @param  {int} collabId  the collab ID\n   * @param  {array} jsonArray description of the children\n   * @param  {Array} acc       the accumulator\n   * @return {Array}           the children\n   */\n  function childrenFromJson(collabId, jsonArray, acc) {\n    acc = acc || [];\n    // an undefined array means we abort the process\n    // where an empty array will ensure the resulting array\n    // is empty as well.\n    if (angular.isUndefined(jsonArray)) {\n      return acc;\n    }\n\n    acc.length = 0;\n    angular.forEach(jsonArray, function(json) {\n      acc.push(NavItem.fromJson(collabId, json));\n    });\n    return acc;\n  }\n  /**\n   * Build an instance from the server object representation.\n   *\n   * @memberof module:clb-collab.clbCollabNav.NavItem\n   * @param  {number} collabId collab ID\n   * @param  {string} json server object representation\n   * @return {NavItem} new instance of NavItem\n   */\n  NavItem.fromJson = function(collabId, json) {\n    /* jshint camelcase: false */\n    var attrs = {\n      id: json.id,\n      appId: json.app_id,\n      collabId: collabId,\n      name: json.name,\n      context: json.context,\n      order: json.order_index,\n      folder: json.type === 'FO',\n      type: json.type,\n      parentId: json.parent,\n      children: childrenFromJson(collabId, json.children)\n    };\n    var k = key(collabId, attrs.id);\n    var cached = cacheNavItems.get(k);\n    if (cached) {\n      return cached.update(attrs);\n    }\n    return new NavItem(attrs).ensureCached();\n  };\n\n  /**\n   * Retrieve the root item of the given collab.\n   *\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @return {Promise} promise the root nav item\n   */\n  var getRoot = function(collabId) {\n    var treePromise = cacheNavRoots.get(collabId);\n\n    if (!treePromise) {\n      treePromise = $http.get(collabApiUrl + collabId + '/nav/all/').then(\n        function(resp) {\n          var root;\n          var i;\n          var item;\n          var data = orderByFilter(resp.data, '+order_index');\n\n          // fill in the cache\n          for (i = 0; i !== data.length; ++i) {\n            item = NavItem.fromJson(collabId, data[i]);\n            if (item.context === 'root') {\n              root = item;\n            }\n          }\n\n          // link children and parents\n          for (i = 0; i !== data.length; ++i) {\n            item = cacheNavItems.get(key(collabId, data[i].id));\n            if (item.parentId) {\n              var parent = cacheNavItems.get(key(collabId, item.parentId));\n              parent.children.push(item);\n            }\n          }\n\n          return root;\n        },\n        clbError.rejectHttpError\n      );\n\n      cacheNavRoots.put(collabId, treePromise);\n    }\n\n    return treePromise;\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {number} nodeId   node ID\n   * @return {NavItem} the matching nav item\n   */\n  var getNode = function(collabId, nodeId) {\n    return getRoot(collabId).then(function() {\n      var k = key(collabId, nodeId);\n      var item = cacheNavItems.get(k);\n\n      if (!item) {\n        $log.error('unknown nav item', k);\n      }\n\n      return item;\n    });\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {str} ctx The context UUID\n   * @return {Promise}   The promise of a NavItem\n   */\n  var getNodeFromContext = function(ctx) {\n    var url = [\n      clbEnv.get('api.collab.v0'),\n      'collab/context',\n      ctx\n    ].join('/') + '/';\n    return $http.get(url)\n    .then(function(res) {\n      var nav = NavItem.fromJson(res.data.collab.id, res.data);\n      var k = key(nav.collabId, nav.id);\n      if (cacheNavItems.get(k)) {\n        nav = cacheNavItems.get(k).update(nav);\n      } else {\n        cacheNavItems.put(k, nav);\n      }\n      return nav;\n    }, function(res) {\n      return $q.reject(clbError.rejectHttpError(res));\n    });\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {number} navItem  the NavItem instance to add to the navigation\n   * @return {Promise} promise of the added NavItem instance\n   */\n  var addNode = function(collabId, navItem) {\n    return $http.post(collabApiUrl + collabId + '/nav/', navItem.toJson())\n    .then(function(resp) {\n      return NavItem.fromJson(collabId, resp.data);\n    }, clbError.rejectHttpError);\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {NavItem} navItem the NavItem instance to remove from the navigation\n   * @return {Promise} promise of an undefined item at the end\n   */\n  var deleteNode = function(collabId, navItem) {\n    return $http.delete(collabApiUrl + collabId + '/nav/' + navItem.id + '/')\n    .then(function() {\n      cacheNavItems.remove(key(collabId, navItem.id));\n    }, clbError.rejectHttpError);\n  };\n\n  /**\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {number} collabId collab ID\n   * @param  {NavItem} navItem the instance to update\n   * @return {Promise} promise the updated instance\n   */\n  var update = function(collabId, navItem) {\n    navItem.collabId = collabId;\n    return $http.put(collabApiUrl + collabId + '/nav/' +\n      navItem.id + '/', navItem.toJson())\n    .then(function(resp) {\n      return NavItem.fromJson(collabId, resp.data);\n    }, clbError.rejectHttpError);\n  };\n\n  // ordering operation needs to be globally queued to ensure consistency.\n  var insertQueue = $q.when();\n\n  /**\n   * Insert node in the three.\n   *\n   * A queue is used to ensure that the insert operation does not conflict\n   * on a single client.\n   *\n   * @memberof module:clb-collab.clbCollabNav\n   * @param  {int} collabId   id of the collab\n   * @param  {NavItem} navItem    Nav item instance\n   * @param  {NavItem} parentItem parent item\n   * @param  {int} insertAt   add to the menu\n   * @return {Promise}        a promise that will\n   *                          return the update nav item\n   */\n  function insertNode(collabId, navItem, parentItem, insertAt) {\n    return insertQueue.then(function() {\n      // first item order_index must be 1\n      navItem.order = (insertAt === -1 ? 1 : insertAt + 1);\n      navItem.parentId = parentItem.id;\n      return update(collabId, navItem);\n    });\n  }\n\n  /**\n   * Return a unique key for chaching a nav item.\n   * @param  {int} collabId collab ID\n   * @param  {int} nodeId   NavItem ID\n   * @return {string}       the unique key\n   * @private\n   */\n  function key(collabId, nodeId) {\n    return collabId + '--' + nodeId;\n  }\n\n  return {\n    NavItem: NavItem,\n    getRoot: getRoot,\n    getNode: getNode,\n    getNodeFromContext: getNodeFromContext,\n    addNode: addNode,\n    saveNode: update,\n    deleteNode: deleteNode,\n    insertNode: insertNode\n  };\n});\n","angular.module('clb-collab')\n.factory('clbCollabTeamRole', clbCollabTeamRole);\n\n/**\n * @namespace clbCollabTeamRole\n * @memberof module:clb-collab\n * @param  {object} $http    Angular DI\n * @param  {object} $log     Angular DI\n * @param  {object} $q       Angular DI\n * @param  {object} clbEnv   Angular DI\n * @param  {object} clbError Angular DI\n * @return {object}          Angular Service\n */\nfunction clbCollabTeamRole($http, $log, $q, clbEnv, clbError) {\n  var urlBase = clbEnv.get('api.collab.v0');\n  var collabUrl = urlBase + '/collab/';\n  var rolesCache = {};\n\n  return {\n    get: get,\n    set: set\n  };\n\n  /**\n   * Retrieve the role of a user.\n   * @param  {int}    collabId  Collab ID\n   * @param  {string} userId    User ID\n   * @return {string}           The user role\n   */\n  function get(collabId, userId) {\n    if (!userId) {\n      $log.error('Must provide userId: ', collabId, userId);\n      return;\n    }\n    if (!rolesCache[collabId]) {\n      rolesCache[collabId] = {};\n    }\n    if (rolesCache[collabId] && rolesCache[collabId][userId]) {\n      return $q.when(rolesCache[collabId][userId]);\n    }\n    return $http.get(collabUrl + collabId + '/team/role/' + userId + '/')\n    .then(function(res) {\n      rolesCache[collabId][userId] = res.data.role;\n      return $q.when(rolesCache[collabId][userId]);\n    }, function(res) {\n      if (res.status === 404) {\n        rolesCache[collabId][userId] = undefined;\n        return $q.when(rolesCache[collabId][userId]);\n      }\n      clbError.rejectHttpError(res);\n    });\n  }\n\n  /**\n   * Set the role of a User within a Collab.\n   * @param {int} collabId    Collab ID\n   * @param {string} userId   User ID\n   * @param {string} role     Role description\n   * @return {Promise}        Resolve when the role is set.\n   */\n  function set(collabId, userId, role) {\n    var thisUrl = collabUrl + collabId + '/team/role/' + userId + '/';\n    if (rolesCache[collabId] && rolesCache[collabId][userId]) {\n      rolesCache[collabId][userId] = role;\n      return $http.put(thisUrl, {role: role})\n      .catch(function(resp) {\n        if (resp.status === 404) { // should have been a POST...\n          return $http.post(thisUrl, {role: role})\n          .catch(clbError.rejectHttpError);\n        }\n        return clbError.rejectHttpError(resp);\n      });\n    }\n    if (!rolesCache[collabId]) {\n      rolesCache[collabId] = {};\n    }\n    rolesCache[collabId][userId] = role;\n    return $http.post(thisUrl, {role: role})\n    .catch(clbError.rejectHttpError);\n  }\n}\n","angular.module('clb-collab')\n.factory('clbCollabTeam', clbCollabTeam);\n\n/**\n * Angular client to access Collab Team REST endpoint.\n *\n * @memberof module:clb-collab\n * @param  {object} $http             Angular DI\n * @param  {object} $log              Angular DI\n * @param  {object} $q                Angular DI\n * @param  {object} lodash            Angular DI\n * @param  {object} clbEnv            Angular DI\n * @param  {object} clbError          Angular DI\n * @param  {object} clbCollabTeamRole Angular DI\n * @param  {object} clbUser           Angular DI\n * @return {object}                   Angular Service\n */\nfunction clbCollabTeam(\n  $http,\n  $log,\n  $q,\n  lodash,\n  clbEnv,\n  clbError,\n  clbCollabTeamRole,\n  clbUser\n) {\n  var urlBase = clbEnv.get('api.collab.v0');\n  var collabUrl = urlBase + '/collab/';\n\n  return {\n    add: add,\n    delete: remove, // backward compatibility\n    remove: remove,\n    list: list,\n    userInTeam: userInTeam,\n    roles: clbCollabTeamRole // backward compatibility\n  };\n\n  /**\n   * Add a team member to a Collab.\n   * @param  {int} collabId the Collab id\n   * @param  {string} userId the User id\n   * @return {Promise} resolve after the user has been added\n   */\n  function add(collabId, userId) {\n    return $http.put(collabUrl + collabId + '/team/', {\n      users: [userId]\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Remove a team member from a Collab.\n   * @param  {int} collabId the Collab id\n   * @param  {string} userId the User id\n   * @return {Promise} resolve after the user has been added\n   */\n  function remove(collabId, userId) {\n    return $http({\n      method: 'DELETE',\n      url: collabUrl + collabId + '/team/',\n      data: {users: [userId]},\n      headers: {'Content-Type': 'application/json'}\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * List team members from the Collab.\n   * @param  {int} collabId The collab ID\n   * @return {Promise}      Resolve to an array of user with injected membership\n   *                        informations.\n   */\n  function list(collabId) {\n    return $http.get(collabUrl + collabId + '/team/')\n    .then(function(res) {\n      var indexedTeam = lodash.keyBy(res.data, 'user_id');\n      return clbUser.list({\n        pageSize: 0,\n        filter: {\n          id: lodash.keys(indexedTeam)\n        }\n      }).then(function(data) {\n        return lodash.reduce(data.results, function(res, user) {\n          var membershipInfo = indexedTeam[parseInt(user.id, 10)];\n          if (membershipInfo) {\n            res.push(angular.extend({}, user, {\n              membershipId: membershipInfo.user_id,\n              role: membershipInfo.role\n            }));\n          }\n          return res;\n        }, []);\n      });\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * Return true if the current user is in the team\n   * @param  {int} collabId The collab ID\n   * @return {Promise}      Resolve to a boolean\n   */\n  function userInTeam(collabId) {\n    return clbUser.getCurrentUserOnly().then(function(me) {\n      return $http.get(collabUrl + collabId + '/team/')\n      .then(function(list) {\n        return lodash.keyBy(\n          list.data, 'user_id')[parseInt(me.id, 10)] !== undefined;\n      });\n    });\n  }\n}\n","angular.module('clb-collab')\n.factory('ClbCollabModel', function() {\n  /**\n   * Representation of a Collab.\n   * @memberof module:clb-collab\n   * @param {object} [attributes] initial values\n   */\n  function ClbCollabModel(attributes) {\n    if (!attributes) {\n      attributes = {};\n    }\n    this.id = attributes.id;\n    this.created = attributes.created || null;\n    this.edited = attributes.edited || null;\n    this.title = attributes.title || '';\n    this.content = attributes.content || '';\n    this.private = attributes.private || false;\n    this.deleted = attributes.deleted || null;\n  }\n  ClbCollabModel.prototype = {\n    toJson: function() {\n      return {\n        id: this.id,\n        title: this.title,\n        content: this.content,\n        private: this.private\n      };\n    },\n    update: function(attrs) {\n      angular.forEach(['id', 'title', 'content', 'private'], function(a) {\n        if (attrs[a] !== undefined) {\n          this[a] = attrs[a];\n        }\n      }, this);\n    }\n  };\n  ClbCollabModel.fromJson = function(json) {\n    if (json.toJson) {\n      return json;\n    }\n    var c = new ClbCollabModel(json);\n    return c;\n  };\n  return ClbCollabModel;\n});\n","/* eslint camelcase:0 */\nangular.module('clb-collab')\n.factory('clbCollab', clbCollab);\n\n/**\n * @namespace clbCollab\n * @memberof module:clb-collab\n * @desc\n * Provide a javascript client to query the Collab REST service.\n *\n * @param  {object} $log             Angular injection\n * @param  {object} $q               Angular injection\n * @param  {object} $cacheFactory    Angular injection\n * @param  {object} $http            Angular injection\n * @param  {object} lodash           Angular injection\n * @param  {object} clbContext       Angular injection\n * @param  {object} clbEnv           Angular injection\n * @param  {object} clbError         Angular injection\n * @param  {object} clbResultSet     Angular injection\n * @param  {object} clbUser          Angular injection\n * @param  {object} ClbCollabModel   Angular injection\n * @param  {object} ClbContextModel  Angular injection\n * @return {object}                  Angular Service\n */\nfunction clbCollab(\n  $log,\n  $q,\n  $cacheFactory,\n  $http,\n  lodash,\n  clbContext,\n  clbEnv,\n  clbError,\n  clbResultSet,\n  clbUser,\n  ClbCollabModel,\n  ClbContextModel\n) {\n  var urlBase = clbEnv.get('api.collab.v0');\n  var collabUrl = urlBase + '/collab/';\n  var myCollabsUrl = urlBase + '/mycollabs/';\n  var collabCache = $cacheFactory('clbCollabInstances');\n  var ongoingCollabGetRequests = {};\n\n  return {\n    Collab: ClbCollabModel,   // backward compatibility\n    Context: ClbContextModel, // backward compatibility\n    context: clbContext,      // backward compatibility\n    get: get,\n    getByLabel: getByLabel,\n    list: list,\n    mine: mine,\n    create: create,\n    save: save,\n    delete: deleteCollab\n  };\n\n  /**\n   * Retrieve the promise of an ongoing request if it exists.\n   * @param  {string} key caching key\n   * @return {Promise}    the existing promise\n   * @private\n   */\n  function getPromiseFromCache(key) {\n    var collab = collabCache.get(key);\n    if (collab) {\n      return $q.when(collab);\n    }\n    if (ongoingCollabGetRequests[key]) {\n      return ongoingCollabGetRequests[key];\n    }\n  }\n\n  /**\n   * Retrieve a collab.\n   * @param  {string} url [description]\n   * @param  {string} key cache key to retrieve\n   * @return {Promise}    Resolve to a collab\n   * @private\n   */\n  function getter(url, key) {\n    if (!key) {\n      return $q.reject(clbError.error({message: 'id parameter is required'}));\n    }\n\n    var promise = getPromiseFromCache(key);\n    if (promise) {\n      return promise;\n    }\n\n    ongoingCollabGetRequests[key] = $http.get(url + key + '/')\n    .then(function(res) {\n      ongoingCollabGetRequests[key] = null;\n      return ClbCollabModel.fromJson(res.data);\n    }, function(res) {\n      ongoingCollabGetRequests[key] = null;\n      return clbError.rejectHttpError(res);\n    });\n    return ongoingCollabGetRequests[key];\n  }\n\n  /**\n   * Retrieve a collab given its id.\n   * @param  {int} id the Collab ID\n   * @return {Promise}    Will resolve to a ClbCollabModel\n   */\n  function get(id) {\n    id = (id && id.id) || id;\n    return getter(collabUrl, id).then(function(collab) {\n      collabCache.put(collab.id, collab);\n      return collab;\n    });\n  }\n\n  /**\n   * Ensure the collab is in cache for the given label.\n   * @param  {ClbCollabModel} collab instance to cache\n   * @param  {string} label   the label\n   * @return {ClbCollabModel} the cached collab\n   * @private\n   */\n  function cacheCollabWithLabel(collab, label) {\n    // ensure the collab is in cache for this label\n    // to avoid duplicate reference for it.\n    if (!collab._label) {\n      collab._label = label;\n      collabCache.put(label, collab);\n      collabCache.put(collab.id, collab);\n    }\n    return collab;\n  }\n\n  /**\n   * Retrieve a collab using a string label.\n   * @param  {string} label the label associated to the Collab\n   * @return {Promise}      will resolve to a ClbCollabModel instance\n   */\n  function getByLabel(label) {\n    return getter(urlBase + '/r/', label).then(function(collab) {\n      // Ensure the collab has not been fetched by id already.\n      // This might occurs if the collab was fetched by id the first\n      // time. In this case, no way to know its associated label.\n      var promise = getPromiseFromCache(collab.id);\n      if (promise) {\n        return promise.then(function(c) {\n          return cacheCollabWithLabel(c, label);\n        });\n      }\n      return cacheCollabWithLabel(collab, label);\n    });\n  }\n\n  /**\n   * @name list\n   * @desc\n   * list return the a hbpUtil.ResultSet instance containing the collab\n   * matching the given parameters.\n   *\n   * @param {Object} [options] the request options\n   * @param {string} [options.search] search string to filter the results\n   * @param {(string|string[])} [options.id] string or array of collab ids\n   * @param {int}  [options.pageSize=25] number of result per page\n   * @param {int}  [options.page] the page to retrive\n   * @param {Object} [options.params] DEPRECATED any query parameter\n   * @param {string} [options.url] DEPRECATED overide the default URL\n   * @return {hbpUtil.ResultSet} a result set of results\n   */\n  function list(options) {\n    var url = collabUrl;\n    var request;\n    // support old signature (url, options)\n    if (angular.isString(options)) {\n      url = options;\n      options = arguments[1];\n    }\n    options = angular.extend({}, options);\n\n    if (angular.isArray(options.id)) {\n      options.id = options.id.join(',');\n    }\n\n    if (options.pageSize) {\n      options.page_size = options.pageSize;\n    }\n\n    if (options.url) { // Deprecated URL support\n      request = $http.get(options.url);\n    } else {\n      request = $http.get(url, {\n        params: angular.extend(\n          {},\n          options.params,\n          lodash.pick(options, ['search', 'id', 'page_size', 'page'])\n        )\n      });\n    }\n    return clbResultSet.get(request, {\n      resultsFactory: resultsFactory\n    });\n  }\n\n  /**\n   * @name mine\n   * @description\n   * `mine` return a hbpUtil.ResultSet of the user collabs.\n   *\n   * @param {Object} [options] request options\n   * @param {string} [options.search] search string to filter the results\n   * @param {int}  [options.pageSize] number of result per page\n   * @param {int}  [options.page] the page to retrive\n   * @return {hbpUtil.ResultSet} the current user collabs\n   */\n  function mine(options) {\n    options = angular.extend({}, options);\n    var params = angular.extend({}, lodash.pick(options, ['search']));\n    return clbResultSet.get($http.get(myCollabsUrl, {params: params}), {\n      resultsFactory: resultsFactory\n    });\n  }\n\n  /**\n   * Create a new collab using a model instance or the server data representation.\n   * @param  {object|ClbCollabModel} jsonCollab JSON representation of the new collab\n   * @return {Promise}           Resolve to the new Collab\n   */\n  function create(jsonCollab) {\n    var c = ClbCollabModel.fromJson(jsonCollab);\n    return $http.post(collabUrl, c.toJson()).then(function(res) {\n      c.update(res.data);\n      collabCache.put(c.id, c);\n      return c;\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * Save a collab using its JSON server representation or a collab instance.\n   * @param  {object|ClbCollabModel} jsonCollab JSON representation of a Collab\n   * @return {Promise}           resolve to the Collab instance.\n   */\n  function save(jsonCollab) {\n    var c = ClbCollabModel.fromJson(jsonCollab);\n    return $http.put(collabUrl + c.id + '/', c.toJson()).then(function(res) {\n      c.update(res.data);\n      collabCache.put(c.id, c);\n      return c;\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * @function delete\n   * @desc\n   * Delete the collab.\n   * @param  {ClbCollabModel} collab The collab instance to delete\n   * @return {Promise}       Resolve once the delete operation is completed\n   */\n  function deleteCollab(collab) {\n    return $http.delete(collabUrl + collab.id + '/').then(\n      function() {\n        collabCache.remove(collab.id);\n        if (collab._label) {\n          collabCache.remove(collab._label);\n        }\n      }, clbError.rejectHttpError\n    );\n  }\n\n  /**\n   * Build the instance from a result list.\n   *\n   * @param  {array} results Array of object\n   * @return {array}         Array of Collab\n   */\n  function resultsFactory(results) {\n    return lodash.map(results, ClbCollabModel.fromJson);\n  }\n}\n","angular.module('clb-collab')\n.factory('ClbContextModel', function(ClbCollabModel) {\n  /**\n   * Representation of a Collab Context.\n   * @memberof module:clb-collab\n   */\n  function ClbContextModel() {}\n  ClbContextModel.fromJson = function(json) {\n    var c = new ClbContextModel();\n    c.context = json.context;\n    c.appId = json.app_id;\n    c.name = json.name;\n    c.navId = json.id;\n    c.collab = ClbCollabModel.fromJson(json.collab);\n    c.toJson = function() {\n      return {\n        context: json.context,\n        appId: json.app_id,\n        name: c.name\n      };\n    };\n    return c;\n  };\n  return ClbContextModel;\n});\n","angular.module('clb-collab')\n.factory('clbContext', clbContext);\n\n/**\n * @namespace clbContext\n * @memberof module:clb-collab\n * @param  {object} $http             Angular DI\n * @param  {object} $q                Angular DI\n * @param  {object} clbError          Angular DI\n * @param  {object} clbEnv            Angular DI\n * @param  {class}  ClbContextModel   Angular DI\n * @return {object}                   the service\n */\nfunction clbContext($http, $q, clbError, clbEnv, ClbContextModel) {\n  var ongoingContextRequests = {};\n  var urlBase = clbEnv.get('api.collab.v0');\n  var collabUrl = urlBase + '/collab/';\n  var contextUrl = collabUrl + 'context/';\n\n  return {\n    get: get\n  };\n\n  /**\n   * @memberof module:clb-collab.clbContext\n   * @param  {string} uuid UUID of the context\n   * @return {Promise}     Resolve to the ClbContextModel instance\n   */\n  function get(uuid) {\n    if (!uuid) {\n      return $q.reject(clbError.error({\n        message: 'uuid parameter is required'\n      }));\n    }\n    // return the promise of an ongoing request\n    if (ongoingContextRequests[uuid]) {\n      return ongoingContextRequests[uuid];\n    }\n    // proceed to the request\n    ongoingContextRequests[uuid] =\n      $http.get(contextUrl + uuid + '/', {cache: true})\n    .then(function(res) {\n      ongoingContextRequests[uuid] = null;\n      return ClbContextModel.fromJson(res.data);\n    }, function(res) {\n      ongoingContextRequests[uuid] = null;\n      return clbError.rejectHttpError(res);\n    });\n    return ongoingContextRequests[uuid];\n  }\n}\n","/* global window */\n\nangular.module('clb-env')\n.provider('clbEnv', clbEnv);\n\n/**\n * Get environement information using dotted notation.\n * @memberof module:clb-env\n * @param {object} $injector AngularJS injection\n * @return {object} provider\n */\nfunction clbEnv($injector) {\n  return {\n    get: get,\n    $get: function() {\n      return {\n        get: get\n      };\n    }\n  };\n\n  /**\n   * ``get(key, [defaultValue])`` provides configuration value loaded at\n   * the application bootstrap.\n   *\n   * Accept a key and an optional default\n   * value. If the key cannot be found in the configurations, it will return\n   * the provided default value. If the defaultValue is undefied, it will\n   * throw an error.\n   *\n   * To ensures that those data are available when angular bootstrap the\n   * application, use angular.clbBootstrap(module, options).\n   *\n   * @memberof module:clb-env.clbEnv\n   * @param {string} key the environment variable to retrieve, using a key.\n   * @param {any} [defaultValue] an optional default value.\n   * @return {any} the value or ``defaultValue`` if the asked for configuration\n   *               is not defined.\n   */\n  function get(key, defaultValue) {\n    var parts = key.split('.');\n    var cursor = (window.bbpConfig ?\n                  window.bbpConfig : $injector.get('CLB_ENVIRONMENT'));\n    for (var i = 0; i < parts.length; i++) {\n      if (!(cursor && cursor.hasOwnProperty(parts[i]))) {\n        if (defaultValue !== undefined) {\n          return defaultValue;\n        }\n        throw new Error('UnkownConfigurationKey: <' + key + '>');\n      }\n      cursor = cursor[parts[i]];\n    }\n    return cursor;\n  }\n}\n","/* global document */\n\nangular.module('clb-error')\n.factory('clbError', clbError);\n\n/**\n * @class ClbError\n * @memberof module:clb-error\n * @desc\n * ``ClbError`` describes a standard error object used\n * to display error message or intropect the situation.\n *\n * A ``ClbError`` instance provides the following properties:\n *\n * * ``type`` a camel case name of the error type.\n * * `message` a human readable message of the error that should\n * be displayed to the end user.\n * * ``data`` any important data that might help the software to\n * inspect the issue and take a recovering action.\n * * ``code`` an error numerical code.\n *\n * The ClbError extends the native Javascript Error instance so it also provides:\n * * ``name`` which is equal to the type\n * * ``stack`` the stack trace of the error (when available)\n *\n * Only ``type``, ``message``, and ``code`` should be considered to be present.\n * They receive default values when not specified by the situation.\n *\n * @param {object} [options] the parameters to use to build the error\n * @param {string} [options.type] the error type (default to ``'UnknownError'``)\n * @param {string} [options.message] the error message (default to ``'An unknown error occurred'``)\n * @param {int} [options.code] the error code (default to ``-1``)\n * @param {object} [options.data] any data that can be useful to deal with the error\n */\nfunction ClbError(options) {\n  options = angular.extend({\n    type: 'UnknownError',\n    message: 'An unknown error occurred.',\n    code: -1\n  }, options);\n  this.type = options.type;\n  this.name = this.type; // Conform to Error class\n  this.message = options.message;\n  this.data = options.data;\n  this.code = options.code;\n  this.stack = (new Error()).stack;\n}\n// Extend the Error prototype\nClbError.prototype = Object.create(Error.prototype);\nClbError.prototype.toString = function() {\n  return String(this.type) + ':' + this.message;\n};\n\n/**\n * @namespace clbError\n * @memberof module:clb-error\n * @desc\n * ``clbError`` provides helper functions that all return an\n * ``ClbError`` instance given a context object.\n * @param {object} $q AngularJS injection\n * @return {object} the service singleton\n */\nfunction clbError($q) {\n  return {\n    rejectHttpError: function(err) {\n      return $q.reject(httpError(err));\n    },\n    httpError: httpError,\n\n    /**\n     * Build an ``ClbError`` instance from the provided options.\n     *\n     * - param  {Object} options argument passed to ``ClbError`` constructor\n     * - return {ClbError} the resulting error\n     * @memberof module:clb-error.clbError\n     * @param  {object} options [description]\n     * @return {object}         [description]\n     */\n    error: function(options) {\n      if (options && options instanceof ClbError) {\n        return options;\n      }\n      return new ClbError(options);\n    }\n  };\n\n  /**\n   * @desc\n   * return a `ClbError` instance built from a HTTP response.\n   *\n   * In an ideal case, the response contains json data with an error object.\n   * It also fallback to a reason field and fill default error message for\n   * standard HTTP status error.\n   * @memberof module:clb-error.clbError\n   * @param  {HttpResponse} response Angular $http Response object\n   * @return {ClbError} a valid ClbError\n   */\n  function httpError(response) {\n    // return argument if it is already an\n    // instance of ClbError\n    if (response && response instanceof ClbError) {\n      return response;\n    }\n\n    if (response.status === undefined) {\n      return new ClbError({\n        message: 'Cannot parse error, invalid format.'\n      });\n    }\n    var error = new ClbError({code: response.status});\n\n    if (error.code === 0) {\n      error.type = 'ClientError';\n      error.message = 'The client cannot run the request.';\n      return error;\n    }\n    if (error.code === 404) {\n      error.type = 'NotFound';\n      error.message = 'Resource not found';\n      return error;\n    }\n    if (error.code === 403) {\n      error.type = 'Forbidden';\n      error.message = 'Permission denied: you are not allowed to display ' +\n                      'the page or perform the operation';\n      return error;\n    }\n    if (error.code === 502) {\n      error.type = 'BadGateway';\n      error.message = '502 Bad Gateway Error';\n      if (response.headers('content-type') === 'text/html') {\n        var doc = document.createElement('div');\n        doc.innerHTML = response.data;\n        var titleNode = doc.getElementsByTagName('title')[0];\n        if (titleNode) {\n          error.message = titleNode.innerHTML;\n        }\n      }\n      return error;\n    }\n    if (response.data) {\n      var errorSource = response.data;\n      if (errorSource.error) {\n        errorSource = errorSource.error;\n      }\n      if (errorSource.type) {\n        error.type = errorSource.type;\n      }\n      if (errorSource.data) {\n        error.data = errorSource.data;\n      }\n      if (errorSource.message) {\n        error.message = errorSource.message;\n      } else if (errorSource.reason) {\n        error.type = 'Error';\n        error.message = errorSource.reason;\n      }\n\n      if (!errorSource.type && !errorSource.data &&\n        !errorSource.message && !errorSource.reason) {\n        // unkown format, return raw data\n        error.data = errorSource;\n      }\n    }\n    return error;\n  }\n}\n","/**\n * @namespace clbFormControlFocus\n * @memberof module:clb-form\n * @desc\n * The ``clbFormControlFocus`` Directive mark a form element as the one that\n * should receive the focus first.\n * @example <caption>Give the focus to the search field</caption>\n * angular.module('exampleApp', ['clb-form']);\n *\n * // HTML snippet:\n * // <form ng-app=\"exampleApp\"><input type=\"search\" clb-form-control-focus></form>\n */\nangular.module('clb-form')\n.directive('clbFormControlFocus', function clbFormControlFocus($timeout) {\n  return {\n    type: 'A',\n    link: function formControlFocusLink(scope, elt) {\n      $timeout(function() {\n        elt[0].focus();\n      }, 0, false);\n    }\n  };\n});\n","/**\n * @namespace clbFormGroupState\n * @memberof module:clb-form\n * @desc\n * ``clbFormGroupState`` directive flag the current form group with\n * the class has-error or has-success depending on its form field\n * current state.\n *\n * @example\n * <caption>Track a field validity at the ``.form-group`` level</caption>\n * angular.module('exampleApp', ['hbpCollaboratory']);\n */\nangular.module('clb-form')\n.directive('clbFormGroupState', function formGroupState() {\n  return {\n    type: 'A',\n    scope: {\n      model: '=clbFormGroupState'\n    },\n    link: function formGroupStateLink(scope, elt) {\n      scope.$watchGroup(['model.$touched', 'model.$valid'], function() {\n        if (!scope.model) {\n          return;\n        }\n        elt.removeClass('has-error', 'has-success');\n        if (!scope.model.$touched) {\n          return;\n        }\n        if (scope.model.$valid) {\n          elt.addClass('has-success');\n        } else {\n          elt.addClass('has-error');\n        }\n      }, true);\n    }\n  };\n});\n","angular.module('clb-identity')\n.factory('clbUser', clbUser);\n\n/**\n * ``clbUser`` service let you retrieve and edit user and groups.\n *\n * @namespace clbUser\n * @memberof module:clb-identity\n * @param  {object} $rootScope      Angular DI\n * @param  {object} $q              Angular DI\n * @param  {object} $http           Angular DI\n * @param  {object} $cacheFactory   Angular DI\n * @param  {object} $log            Angular DI\n * @param  {object} lodash          Angular DI\n * @param  {object} clbEnv          Angular DI\n * @param  {object} clbError        Angular DI\n * @param  {object} clbResultSet    Angular DI\n * @param  {object} clbIdentityUtil Angular DI\n * @return {object} Angular Service\n */\nfunction clbUser(\n  $rootScope,\n  $q,\n  $http,\n  $cacheFactory,\n  $log,\n  lodash,\n  clbEnv,\n  clbError,\n  clbResultSet,\n  clbIdentityUtil\n) {\n  var userCache = $cacheFactory('clbUser');\n  var userUrl = clbEnv.get('api.user.v1') + '/user';\n  // key used to store the logged in user in the cache\n  var currentUserKey = '_currentUser_';\n  activate();\n\n  return {\n    get: getPromiseId2userInfo,\n    getCurrentUserOnly: getCurrentUserOnly,\n    getCurrentUser: getCurrentUser,\n    create: create,\n    update: update,\n    list: list,\n    search: search,\n    isGroupMember: isGroupMember,\n    isHbpMember: isHbpMember,\n    adminGroups: adminGroups,\n    memberGroups: groups\n  };\n\n  /**\n   * Bootstrap the service\n   * @private\n   */\n  function activate() {\n    $rootScope.$on('user:disconnected', function() {\n      userCache.removeAll();\n    });\n  }\n\n  /**\n   * Create requests with a maximum length of 2000 chars.\n   * @param  {array/any} source Array of params to generate URL for\n   * @param  {string} urlPrefix   The beginning of the URL\n   * @param  {string} destination An array to put all the URL into\n   * @param  {string} argName     Name of the argument\n   * @private\n   */\n  function splitInURl(source, urlPrefix, destination, argName) {\n    if (source.length === 0) {\n      return;\n    }\n    var url = urlPrefix + source[0];\n    var sep = '&' + argName + '=';\n    for (var i = 1; i < source.length; i++) {\n      if (url.length + source[i].length + sep.length < 2000) {\n        // If we still have enough room in the url we add the id to it\n        url += sep + source[i];\n      } else {\n        // We flush the call and start a new one\n        destination.push(url);\n        url = urlPrefix + source[i];\n      }\n    }\n    destination.push(url);\n  }\n\n  /**\n   * Add a list of user to the cache.\n   * @param {array} addedUserList Array of users to add\n   * @param {object} response A key/value store where key is the user id\n   * @private\n   */\n  function addToCache(addedUserList, response) {\n    for (var i = 0; i < addedUserList.length; i++) {\n      var addedUser = addedUserList[i];\n      if (addedUser.displayName === undefined) {\n        addedUser.displayName = addedUser.name;\n      }\n      // add to response\n      response[addedUser.id] = addedUser;\n      // add to cache\n      userCache.put(addedUser.id, addedUser);\n    }\n  }\n\n  /**\n   * @desc\n   * Return a promise that will resolve to a list of groups and users\n   * based on the given array of ``ids``.\n   *\n   * In case of error, the promise is rejected with a ``ClbError`` instance.\n   *\n   * Return a promise with an map of id->userInfo based on the\n   * provided list of IDs.\n   * @function get\n   * @memberof module:clb-identity.clbUser\n   * @param  {array} ids Array of ID\n   * @return {Promise}   Resolve to a map of ID/UserInfo\n   * @private\n   */\n  function getPromiseId2userInfo(ids) {\n    var deferred = $q.defer();\n\n    var uncachedUser = [];\n    var response = {};\n    var urls = [];\n\n    var rejectDeferred = function() {\n      deferred.reject.apply(deferred, ids);\n    };\n    var processResponseAndCarryOn = function(data) {\n      // atm group and user api response data format is different\n      var items;\n      if (data.data.result) {\n        items = data.data.result;\n      } else if (data.data._embedded.users) {\n        items = data.data._embedded.users;\n      } else if (data.data._embedded.groups) {\n        items = data.data._embedded.groups;\n      } else if (data.data.content) {\n        items = data.data.content;\n      } else {\n        $log.error(\"Unable to find a resultset in data\", data);\n      }\n      addToCache(items, response);\n      if (urls && urls.length > 0) {\n        return $http.get(urls.shift())\n        .then(processResponseAndCarryOn, rejectDeferred);\n      }\n      deferred.resolve(response);\n    };\n\n    angular.forEach(ids, function(id) {\n      var user = userCache.get(id);\n      if (user) { // The id is already cached\n        response[id] = user;\n      } else {\n        uncachedUser.push(id);\n      }\n    });\n\n    if (uncachedUser.length === 0) {\n      // All ids are already available -> we resolve the promise\n      deferred.resolve(response);\n    } else {\n      // Get the list of URLs to call\n      var userBaseUrl = '/search?id=';\n      splitInURl(uncachedUser, userUrl + userBaseUrl, urls, 'id');\n\n      // Async calls and combination of result\n      $http.get(urls.shift()).then(processResponseAndCarryOn, rejectDeferred);\n    }\n\n    return deferred.promise;\n  }\n\n   /**\n    * @name isGroupMember\n    * @desc\n    * Return a promise that will resolve to true if the current user is a member of one of the groups in input.\n    *\n    * `groups` can be either a string or an array.\n    *\n    * @memberof module:clb-identity.clbUser\n    * @function\n    * @param  {array}  groups A list of groups\n    * @return {Promise}       Resolve to a boolean\n    */\n  function isGroupMember(groups) {\n    return this.getCurrentUser().then(function(user) {\n      var compFunc = function(group) {\n        return lodash.some(user.groups, function(g) {\n          return g.name === group;\n        });\n      };\n      var groupList = lodash.isArray(groups) ? groups : [groups];\n      return lodash.some(groupList, compFunc);\n    });\n  }\n\n  /**\n   * Promise a ResultSet containing the groups that the user is member of.\n   *\n   * @param  {string} [userId] the user id or 'me' if unspecified\n   * @param  {object} options optional request parameters\n   * @param  {int} options.pageSize the size of a result page\n   * @return {Promise}      will return a ResultSet of groups\n   */\n  function groups(userId, options) {\n    if (angular.isObject(userId)) {\n      options = userId;\n      userId = 'me';\n    }\n    userId = userId || 'me';\n    options = angular.extend({sort: 'name'}, options);\n    var params = clbIdentityUtil.queryParams(options);\n    var url = userUrl + '/' + userId + '/member-groups';\n    if (options.filter) {\n      try {\n        url += '?' + appendFilterToPath(options.filter, ['name']);\n      } catch (ex) {\n        return $q.reject(ex);\n      }\n    }\n    return clbResultSet.get(\n      $http.get(url, {params: params}),\n      paginationOptions('groups', options.factory)\n    );\n  }\n\n  /**\n   * Promise a ResultSet containing the groups that the user can administrate.\n   *\n   * @param  {string} [userId] the user id or 'me' if unspecified\n   * @param  {object} options optional request parameters\n   * @param  {int} options.pageSize the size of a result page\n   * @return {Promise}      will return a ResultSet of groups\n   */\n  function adminGroups(userId, options) {\n    if (angular.isObject(userId)) {\n      options = userId;\n      userId = 'me';\n    }\n    userId = userId || 'me';\n    options = angular.extend({sort: 'name'}, options);\n    var params = clbIdentityUtil.queryParams(options);\n    var url = [userUrl, userId, 'admin-groups'].join('/');\n    if (options.filter) {\n      try {\n        url += '?' + appendFilterToPath(options.filter, ['name']);\n      } catch (ex) {\n        return $q.reject(ex);\n      }\n    }\n    return clbResultSet.get(\n      $http.get(url, {\n        params: params\n      }),\n      paginationOptions('groups', options.factory)\n    );\n  }\n\n  /**\n   * Append a list of filters to an URL.\n   * @param  {object} [filter] Keys are filter names and value is the filter string\n   * @param  {array}  [supportedFilters] list of authorised keys for the filter property\n   * @throws {HbpError} FilterNotSupportedError\n   * @return {string}   resulting path\n   * @private\n   */\n  function appendFilterToPath(filter, supportedFilters) {\n    if (!filter) {\n      return;\n    }\n    var queryString = '';\n    var fn = function(k) {\n      return function(vi) {\n        queryString += k + '=' + encodeURIComponent(vi) + '&';\n      };\n    };\n    for (var k in filter) {\n      if (filter.hasOwnProperty(k)) {\n        if (supportedFilters.indexOf(k) === -1) {\n          throw clbError.error({\n            type: 'FilterNotSupportedError',\n            message: 'Cannot filter on property: ' + k\n          });\n        }\n        var v = filter[k];\n        if (angular.isArray(v)) {\n          lodash.each(v, fn(k));\n        } else {\n          queryString += k + '=' + encodeURIComponent(v) + '&';\n        }\n      }\n    }\n    return queryString.slice(0, -1);\n  }\n\n  /**\n   * Return pagination config to pass to ``clbResultSet.get``.\n   * @param  {string} pluralType Plural form to look for in the results\n   * @param  {function} factory  Factory function to use to build a batch of results\n   * @return {object}            Options to pass to ``clbResultSet.get``\n   */\n  function paginationOptions(pluralType, factory) {\n    return {\n      resultKey: '_embedded.' + pluralType,\n      nextUrlKey: '_links.next.href',\n      previousUrlKey: '_links.prev.href',\n      countKey: 'page.totalElements',\n      resultsFactory: factory\n    };\n  }\n\n  /**\n   * @name getCurrentUserOnly\n   * @desc\n   * Return a promise that will resolve to the current user, NOT including group\n   * info.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @return {Promise} Resolve to the current user\n   */\n  function getCurrentUserOnly() {\n    var user = userCache.get(currentUserKey);\n    if (user) {\n      return $q.when(user);\n    }\n    // load it from user profile service\n    return $http.get(userUrl + '/me').then(\n      function(userData) {\n        // merge groups into user profile\n        var profile = userData.data;\n\n        // add to cache\n        userCache.put(currentUserKey, profile);\n        return profile;\n      }, clbError.rejectHttpError);\n  }\n\n  /**\n   * @name getCurrentUser\n   * @desc\n   * Return a promise that will resolve to the current user.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @return {Promise} Resolve to the Current User\n   */\n  function getCurrentUser() {\n    var user = userCache.get(currentUserKey);\n    if (user && user.groups) {\n      return $q.when(user);\n    }\n\n    var request = {};\n    if (!user) {\n      request.user = this.getCurrentUserOnly();\n    }\n\n    request.groups = clbResultSet.get(\n      $http.get(userUrl + '/me/member-groups'),\n      paginationOptions('groups')\n    ).then(function(rs) {\n      return rs.toArray();\n    });\n\n    // load it from user profile service\n    return $q.all(request).then(function(aggregatedData) {\n      // merge groups into user profile\n      var profile = aggregatedData.user || user;\n      profile.groups = aggregatedData.groups;\n\n      // add to cache\n      userCache.put(currentUserKey, profile);\n      return profile;\n    }, clbError.rejectHttpError);\n  }\n\n  /**\n   * @name create\n   * @desc\n   * Create the given `user`.\n   *\n   * The method return a promise that will resolve to the created user instance.\n   * In case of error, a `HbpError` instance is retrieved.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @param {object} user Data to build the user from\n   * @return {Promise} Resolve to the new User\n   */\n  function create(user) {\n    return $http.post(userUrl, user).then(\n      function() {\n        return user;\n      },\n      clbError.rejectHttpError\n    );\n  }\n\n  /**\n   * @name update\n   * @desc\n   * Update the described `user` with the given `data`.\n   *\n   * If data is omitted, `user` is assumed to be the updated user object that\n   * should be persisted. When data is present, user can be either a `User`\n   * instance or the user id.\n   *\n   * The method return a promise that will resolve to the updated user instance.\n   * Note that this instance is a copy of the user. If you own a user instance\n   * already, you cannot assume this method will update it.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @param  {object} user User to update\n   * @param  {object} [data] Data to update the user with if not already in ``user`` instance\n   * @return {Promise}       Resolve to the User instance\n   */\n  function update(user, data) {\n    data = data || user;\n    var id = (typeof user === 'string' ? user : user.id);\n    return $http.patch(userUrl + '/' + id, data).then(\n      function() {\n        userCache.remove(id);\n        var cachedCurrentUser = userCache.get(currentUserKey);\n        if (cachedCurrentUser && cachedCurrentUser.id === id) {\n          userCache.remove(currentUserKey);\n        }\n        return getPromiseId2userInfo([id]).then(\n          function(users) {\n            return lodash.first(lodash.values(users));\n          }\n        );\n      },\n      clbError.rejectHttpError\n    );\n  }\n\n  /**\n   * @name list\n   * @desc\n   * Retrieves a list of users filtered, sorted and paginated according to the options.\n   *\n   * The returned promise will be resolved with the list of fetched user profiles\n   * and 2 fuctions (optional) to load next page and/or previous page.\n   * {{next}} and {{prev}} returns a promise that will be resolved with an object\n   * like the one returned by the current function.\n   *\n   * Return object example:\n   * {\n   *  results: [...],\n   *  next: function() {},\n   *  prev: function() {}\n   * }\n   *\n   * Available options:\n   *\n   * * sort: property to sort on. prepend '-' to reverse order.\n   * * page: page to be loaded (default: 0)\n   * * pageSize: max number or items to be loaded (default: 10, when 0 all records are loaded)\n   * * filter: an Object containing the field name as key and\n   *       the query as a String or an Array of strings\n   * * managedOnly: returns only the users managed by the current logged in user\n   *\n   * Supported filter values:\n   *\n   * * ``'displayName'``\n   * * ``'email'``\n   * * ``'id'``\n   * * ``'username'``\n   * * ``'accountType'``\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @param {object} [options] Parameters to use\n   * @param {string} [options.sort] Attribute to sort the user with (default to ``'familyName'``)\n   * @param {string} [options.filter] Object containing query filters\n   * @param {function} [options.factory] A function that accept an array of user data and build object from them\n   * @param {int} [options.pageSize] The number of result per page ; if 0, load all results\n   * @param {int} [options.page] The result page to retrieve\n   * @return {Promise} Resolve to the user ResultSet instance\n   */\n  function list(options) {\n    var opt = angular.extend({\n      sort: 'familyName'\n    }, options);\n    var endpoint = userUrl;\n\n    // append filter part to endpoint\n    if (opt.filter) {\n      var supportedFilters = [\n        'displayName',\n        'email',\n        'id',\n        'username',\n        'accountType'\n      ];\n      try {\n        endpoint += '/search?' + appendFilterToPath(\n          opt.filter, supportedFilters);\n      } catch (ex) {\n        return $q.reject(ex);\n      }\n    }\n\n    var pageOptions = paginationOptions('users', opt.factory);\n    var params = clbIdentityUtil.queryParams(opt);\n\n    var result = clbResultSet.get($http.get(endpoint, {\n      params: params\n    }), pageOptions);\n\n    // if pageSize=0 load everything\n    return (opt.pageSize === 0) ? result.instance.all() : result;\n  }\n\n  /**\n   * Promise a list of users who matched the given query string.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @param  {string} queryString the search query\n   * @param  {object} [options]   query options\n   * @param  {int} [options.pageSize] the number of result to retrieve\n   * @param  {function} [options.factory] the factory function to use\n   * @return {Promise} will return a ResultSet containing the results\n   */\n  function search(queryString, options) {\n    options = angular.extend({}, options);\n    var params = clbIdentityUtil.queryParams(options);\n    params.str = queryString;\n    var url = userUrl + '/searchByText';\n\n    return clbResultSet.get($http.get(url, {\n      params: params\n    }), paginationOptions('users', options.factory));\n  }\n\n  /**\n   * @name isHbpMember\n   * @desc\n   * Return a promise that will resolve to true if the current user is a\n   * HBP member.\n   *\n   * @memberof module:clb-identity.clbUser\n   * @function\n   * @return {Promise} Resolve to a boolean\n   */\n  function isHbpMember() {\n    return this.isGroupMember(\n      clbEnv.get('collab.groups.hbpMember', 'hbp-member'));\n  }\n}\n","angular.module('clb-identity')\n.factory('clbIdentityUtil', clbIdentityUtil);\n\n/* ------------------ */\n\n/**\n * The ``hbpIdentityUtil`` service groups together useful function for the hbpIdentity module.\n * @namespace clbIdentityUtil\n * @memberof module:clb-identity\n * @param  {object} $log   Angular DI\n * @param  {object} lodash Angular DI\n * @return {object}        Angular Service\n */\nfunction clbIdentityUtil($log, lodash) {\n  return {\n    queryParams: queryParams\n  };\n\n  /**\n   * @name queryParams\n   * @memberof module:clb-identity.clbIdentityUtil\n   * @desc\n   * Accept an object with the following attributes:\n   *\n   * - page: the result page to load (default: 0)\n   * - pageSize: the size of a page (default: 50)\n   * - filter: an Object containing the field name as key and\n   *           the query as a String or an Array of strings\n   * - sort: the ordering column as a string. prepend with '-' to reverse order.\n   *\n   * @param  {Object} options sort and filter keys\n   * @return {Object} params suitable for $http requests\n   */\n  function queryParams(options) {\n    var defaultOptions = {\n      page: 0,\n      pageSize: 50\n    };\n    var opt = angular.extend(defaultOptions, options);\n\n    var sortStr;\n    if (opt.sort) {\n      var sortVal = opt.sort;\n      if (lodash.isArray(sortVal) && sortVal.length > 0) {\n        sortVal = sortVal[0];\n        $log.warn('Multiple field sorting not supported. Using: ' + sortVal);\n      }\n      sortStr = lodash(sortVal).toString();\n\n      if (sortStr.charAt(0) === '-') {\n        sortStr = sortStr.substring(1) + ',desc';\n      }\n    }\n\n    return {\n      page: opt.page,\n      pageSize: opt.pageSize,\n      sort: sortStr\n    };\n  }\n}\n","/* eslint camelcase: 0 */\n\nangular.module('clb-storage')\n.factory('clbStorage', clbStorage);\n\n/**\n * @namespace clbStorage\n * @memberof module:clb-storage\n * @desc\n * The ``clbStorage`` service provides utility functions to ease the interaction\n * of apps with storage.\n * @param  {object} $http    Angular DI\n * @param  {object} $q       Angular DI\n * @param  {object} uuid4    Angular DI\n * @param  {object} clbEnv   Angular DI\n * @param  {object} clbError Angular DI\n * @return {object}          Angular DI\n */\nfunction clbStorage(\n  $http,\n  $q,\n  uuid4,\n  clbEnv,\n  clbError\n) {\n  var baseUrl = clbEnv.get('api.document.v0');\n  var entityUrl = baseUrl + '/entity';\n  var fileUrl = baseUrl + '/file/';\n  var promises = {};\n  return {\n    getEntityByContext: getEntityByContext,\n    getCollabHome: getCollabHome,\n    getEntity: getEntity,\n    query: query,\n    getContent: getContent,\n    copy: copy,\n    create: create,\n    setContextMetadata: setContextMetadata,\n    deleteContextMetadata: deleteContextMetadata,\n    updateContextMetadata: updateContextMetadata,\n    addMetadata: addMetadata,\n    deleteMetadata: deleteMetadata\n  };\n\n  // -------------------- //\n\n  /**\n   * Get an entity (e.g.: a project, a file or a folder):\n   *\n   * - the entity uuid\n   * - an entity representation with ``{_uuid: ENTITY_ID}``\n   * - the entity collab ID and a relative path\n   * - the entity absolute path\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {string|object} locator  Describe the entity to retrieve\n   * @param {string} [locator._uuid] An entity descriptor containing ``_uuid``\n   * @param {string} [locator.path]  Use with ``locator.collab`` to retrieve the\n   *                                 local path within a collab.\n   * @param {int} [locator.collab]   The collab ID to retrieve the storage from.\n   * @return {Promise}               Resolve to an entity descriptor\n   */\n  function getEntity(locator) {\n    if (uuid4.validate(locator)) {\n      return getEntityByUUID(locator);\n    }\n    return $q.reject(clbError.error({\n      type: 'InvalidArgument',\n      message: 'locator must be a valid UUID4'\n    }));\n  }\n\n  /**\n   * Ensure there is only one async `fn` run named `k` at once.\n   * subsequent call to runOnce with the same `k` value will\n   * return the promise of the running async function.\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string}   k  The key\n   * @param  {Function} fn The function that retrieve a Promise\n   * @return {Promise}     Resolve to the function result\n   * @private\n   */\n  function runOnce(k, fn) {\n    if (!promises[k]) {\n      promises[k] = fn().finally(function() {\n        promises[k] = null;\n      });\n    }\n    return promises[k];\n  }\n\n  /**\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} uuid Entity UUID\n   * @return {Promise}     Resolve to the entity Descriptor\n   * @private\n   */\n  function getEntityByUUID(uuid) {\n    var url = entityUrl + '/' + uuid;\n    var k = 'GET ' + url;\n    return runOnce(k, function() {\n      return $http.get(url).then(function(data) {\n        return data.data;\n      });\n    });\n  }\n\n  /**\n   * Query entities by attributes or metadata.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} params Query Parameters\n   * @return {Promise}      Resolve to a ResultSet instance\n   */\n  function query(params) {\n    return $http.get(entityUrl + '/', {\n      params: params\n    }).then(function(response) {\n      return response.data;\n    });\n  }\n\n  /**\n   * Retrieve the key to lookup for on entities given the ctx\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} ctx application context UUID\n   * @return {string}     name of the entity attribute that should be used\n   * @private\n   */\n  function metadataKey(ctx) {\n    return 'ctx_' + ctx;\n  }\n\n  /**\n   * @name setContextMetadata\n   * @memberof module:clb-storage.clbStorage\n   * @desc\n   * the function links the contextId with the doc browser entity in input\n   * by setting a specific metadata on the entity.\n   *\n   * Entity object in input must contain the following properties:\n   * - _entityType\n   * - _uuid\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {Object} entity doc browser entity\n   * @param  {String} contextId collab app context id\n   * @return {Promise} a promise that resolves when the operation is completed\n   */\n  function setContextMetadata(entity, contextId) {\n    var newMetadata = {};\n    newMetadata[metadataKey(contextId)] = 1;\n    return addMetadata(entity, newMetadata);\n  }\n\n  /**\n   * @name getEntityByContext\n   * @memberof module:clb-storage.clbStorage\n   * @desc\n   * the function gets the entity linked to the contextId in input.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String} contextId collab app context id\n   * @return {Promise} a promise that resolves when the operation is completed\n   */\n  function getEntityByContext(contextId) {\n    var queryParams = {};\n    queryParams[metadataKey(contextId)] = 1;\n    return query(queryParams).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * @name deleteContextMetadata\n   * @memberof module:clb-storage.clbStorage\n   * @desc\n   * the function unlink the contextId from the entity in input\n   * by deleting the context metadata.\n   *\n   * Entity object in input must contain the following properties:\n   * - _entityType\n   * - _uuid\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {Object} entity doc browser entity\n   * @param  {String} contextId collab app context id\n   * @return {Promise} a promise that resolves when the operation is completed\n   */\n  function deleteContextMetadata(entity, contextId) {\n    var key = metadataKey(contextId);\n\n    return deleteMetadata(entity, [key]);\n  }\n\n  /**\n   * @name updateContextMetadata\n   * @memberof module:clb-storage.clbStorage\n   * @desc\n   * the function delete the contextId from the `oldEntity` metadata and add\n   * it as `newEntity` metadata.\n   *\n   * Entity objects in input must contain the following properties:\n   * - _entityType\n   * - _uuid\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {Object} newEntity doc browser entity to link to the context\n   * @param  {Object} oldEntity doc browser entity to unlink from the context\n   * @param  {String} contextId collab app context id\n   * @return {Promise}          Resolves when the operation is completed\n   */\n  function updateContextMetadata(newEntity, oldEntity, contextId) {\n    return deleteContextMetadata(oldEntity, contextId).then(function() {\n      return setContextMetadata(newEntity, contextId);\n    }).catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Add metadata to the provided entity and returns a promise that resolves to an object\n   * containing all the new metadata. The promise fails if one of the metadata already exists.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} entity   Entity Descriptor\n   * @param {object} metadata key/value store where keys are the metadata name to set\n   * @return {Promise}        Resolves after the operation is completed\n   */\n  function addMetadata(entity, metadata) {\n    return $http.post(baseUrl + '/' + entity._entityType + '/' +\n    entity._uuid + '/metadata', metadata)\n    .then(function(response) {\n      return response.data;\n    })\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Delete metadata keys in input from the provided entity and returns a promise that resolves to an object\n   * containing all the remaining metadata. The promise fails if one of the metadata doesn't exist.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param {object} entity      Entity Descriptor\n   * @param {array} metadataKeys Array of metatdata keys to delete\n   * @return {Promise}           Resolve to the metadata\n   */\n  function deleteMetadata(entity, metadataKeys) {\n    return $http.delete(baseUrl + '/' + entity._entityType + '/' +\n      entity._uuid + '/metadata', {data: {keys: metadataKeys}})\n    .then(function(response) {\n      return response.data;\n    })\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * @name getCollabHome\n   * @memberof module:clb-storage.clbStorage\n   * @desc\n   * The function returns the storage project of the collabId in input.\n   *\n   * In case of error, the promise is rejected with a `HbpError` instance.\n   *\n   * @param  {String} collabId collab id\n   * @return {Promise} a promise that resolves to the project details\n   */\n  function getCollabHome(collabId) {\n    var queryParams = {\n      managed_by_collab: collabId\n    };\n    return query(queryParams)\n    .catch(clbError.rejectHttpError);\n  }\n\n  /**\n   * Create a new entity.\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} type           Entity Type (e.g.: file, folder, project)\n   * @param  {string|object} parent  Parent UUID or entity descriptor\n   * @param  {string} name           File name\n   * @param  {object} options        Extend the entity descriptor with those data\n   * @return {Promise}               Resolve once done\n   */\n  function create(type, parent, name, options) {\n    return $http.post(\n      baseUrl + '/' + type.split(':')[0],\n      angular.extend({\n        _name: name,\n        _parent: parent && parent._uuid || parent\n      }, options)\n    )\n    .then(function(res) {\n      return res.data;\n    })\n    .catch(function(err) {\n      if (err.code === 0) {\n        err = clbError.error({\n          type: 'Aborted',\n          message: 'Network unreachable',\n          code: 0\n        });\n      } else {\n        err = clbError.httpError(err);\n      }\n      if (err.message.match(/already exists/)) {\n        err.type = 'FileAlreadyExistError';\n      } else {\n        err.type = 'EntityCreationError';\n      }\n      err.cause = err.type; // preserve legacy API\n      return $q.reject(err);\n    });\n  }\n\n  /**\n   * Copy a file to a destination folder\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} srcId        UUID of the entity to copy\n   * @param  {string} destFolderId UUID of the target directory\n   * @return {Promise}             Resolves when done\n   */\n  function copy(srcId, destFolderId) {\n    return getEntity(srcId).then(function(src) {\n      return create(src._entityType, destFolderId, src._name, {\n        _description: src._description,\n        _contentType: src._contentType\n      })\n      .then(function(dest) {\n        var url = [baseUrl, dest._entityType, dest._uuid, 'content'].join('/');\n        return $http.put(url, {}, {\n          headers: {'X-Copy-From': src._uuid}\n        }).then(function() {\n          return dest;\n        }).catch(function(err) {\n          $q.reject(clbError.httpError(err));\n        });\n      });\n    });\n  }\n\n  /**\n   * Retrieves the content of a file given its id.\n   *\n   * @function\n   * @memberof module:clb-storage.clbStorage\n   * @param  {string} id FileEntity UUID\n   * @return {Promise}   The raw content\n   */\n  function getContent(id) {\n    return $http({\n      method: 'GET',\n      url: fileUrl(id + '/content'),\n      transformResponse: function(data) {\n        return data;\n      }\n    }).then(function(data) {\n      return data.data;\n    }).catch(clbError.rejectHttpError);\n  }\n}\n","angular.module('clb-rest')\n.factory('clbResultSet', clbResultSet);\n\n/**\n * @namespace clbResultSet\n * @memberof module:clb-rest\n * @param  {object} $http           Angular DI\n * @param  {object} $q              Angular DI\n * @param  {object} clbError Angular DI\n * @return {object}                 Angular Service\n */\nfunction clbResultSet($http, $q, clbError) {\n  /**\n   * @attribute ResultSetEOL\n   * @memberof module:clb-rest.clbResultSet\n   * @desc error thrown when hbpUtil.ResultSet is crawled when at an\n   *       extremity.\n   */\n  var ResultSetEOL = clbError.error({\n    type: 'ResultSet::EOL',\n    message: 'End of list reached'\n  });\n\n  return {\n    get: getPaginatedResultSet,\n    EOL: ResultSetEOL\n  };\n\n  /**\n   * @name get\n   * @memberof module:clb-rest.clbResultSet\n   * @desc\n   * Return a promise that will resolve once the result set first page is loaded.\n   *\n   * The promise contains the `instance` of the result set as well.\n   *\n   * @param  {Object} res     a HTTPResponse or a promise which resolve to a HTTPResponse\n   * @param  {Object} [options] configuration\n   * @param  {string} [options.nextUrlKey] name of (or dot notation path to) the attribute containing the URL to fetch next results\n   * @param  {string} [options.previousUrlKey] name of (or dot notation path to) the attribute containing the URL to fetch previous results\n   * @param  {string} [options.resultKey] name of (or dot notation path to) the attribute containing an array with all the results\n   * @param  {string} [options.countKey] name of (or dot notation path to) the attribute containing the number of results returned\n   * @param  {function} [options.resultsFactory] a function to which a new array of results is passed.\n   *                    The function can return `undefined`, a `promise` or an `array` as result.\n   * @return {ResultSet}a new instance of ResultSet\n   */\n  function getPaginatedResultSet(res, options) {\n    return new ResultSet(res, options).promise;\n  }\n\n  /**\n   * @class ResultSet\n   * @memberof module:clb-rest.clbResultSet\n   * @desc\n   * Build a result set with internal support for fetching next and previous results.\n   *\n   * @param {Object} pRes the promise of the first result page\n   * @param {Object} options various options to specify how to handle the pagination\n   * @see {module:clb-rest.clbResultSet.get}\n   */\n  function ResultSet(pRes, options) {\n    var self = this;\n\n    self.results = [];\n    self.error = null;\n    self.hasNext = null;\n    self.hasPrevious = null;\n    self.promise = null;\n    self.errorHandler = null;\n    self.next = enqueue(next);\n    self.previous = enqueue(previous);\n    self.toArray = enqueue(toArray);\n    self.all = enqueue(all);\n    self.count = -1;\n\n    options = angular.extend({\n      resultKey: 'results',\n      nextUrlKey: 'next',\n      previousUrlKey: 'previous',\n      countKey: 'count'\n    }, options);\n\n    self.promise = $q.when(pRes)\n    .then(initialize)\n    .catch(handleError);\n    self.promise.instance = self;\n\n    /**\n     * @name next\n     * @memberOf hbpUtil.ResultSet\n     * @desc\n     * Retrieve the next result page.\n     * @memberof module:clb-rest.clbResultSet.ResultSet\n     *\n     * @return {Object} a promise that will resolve when the next page is fetched.\n     */\n    function next() {\n      if (!self.hasNext) {\n        return $q.reject(ResultSetEOL);\n      }\n      return $http.get(self.nextUrl)\n      .then(handleNextResults);\n    }\n\n    /**\n     * @name previous\n     * @memberOf hbpUtil.ResultSet\n     * @desc\n     * Retrieve the previous result page\n     *\n     * @return {Object} a promise that will resolve when the previous page is fetched.\n     */\n    function previous() {\n      if (!self.hasPrevious) {\n        return $q.reject(ResultSetEOL);\n      }\n      return $http.get(self.previousUrl)\n      .then(handlePreviousResults);\n    }\n\n    /**\n     * @name toArray\n     * @memberof hbpUtil.ResultSet\n     * @desc\n     * Retrieve an array containing ALL the results. Beware that this\n     * can be very long to resolve depending on your dataset.\n     *\n     * @return {Promise} a promise that will resolve to the array when\n     * all data has been fetched.\n     */\n    function toArray() {\n      return all().then(function() {\n        return self.results.slice();\n      });\n    }\n\n    /**\n     * Load all pages.\n     * @memberof hbpUtil.ResultSet\n     * @return {Promise} Resolve once everything is loaded\n     */\n    function all() {\n      if (self.hasNext) {\n        return next().then(all);\n      }\n      return $q.when(self);\n    }\n\n    /**\n     * parse the next result set according to options.\n     * @param  {HTTPResponse} res response containing the results.\n     * @return {ResultSet} self for chaining\n     * @private\n     */\n    function handleNextResults(res) {\n      var rs = res.data;\n      var result = at(rs, options.resultKey);\n\n      var fResult;\n      if (options.resultsFactory) {\n        fResult = options.resultsFactory(result);\n      }\n      return $q.when(fResult)\n      .then(function(computedResult) {\n        self.results.push.apply(self.results, (computedResult || result));\n        counting(rs);\n        bindNext(rs);\n        return self;\n      });\n    }\n\n    /**\n     * parse the previous result set according to options.\n     * @param  {HTTPResponse} res response containing the results.\n     * @return {ResultSet} self for chaining\n     * @private\n     */\n    function handlePreviousResults(res) {\n      var rs = res.data;\n      var result = at(rs, options.resultKey);\n      var fResult;\n      if (options.resultsFactory) {\n        fResult = options.resultsFactory(result);\n      }\n      return $q.when(fResult)\n      .then(function(computedResult) {\n        self.results.unshift.apply(self.results, (computedResult || result));\n        counting(rs);\n        bindPrevious(rs);\n        return self;\n      });\n    }\n\n    /**\n     * @name at\n     * @desc\n     * Lodash 'at' function replacement. This is needed because the 'at' function\n     * supports Object as first arg only starting from v4.0.0.\n     * Migration to that version has big impacts.\n     *\n     * See: https://lodash.com/docs#at\n     * @param {object} obj the object to search in\n     * @param {string} desc the dotted path to the location\n     * @return {instance} the found value\n     * @private\n     */\n    function at(obj, desc) {\n      var arr = desc.split('.');\n      while (arr.length && obj) {\n        obj = obj[arr.shift()];\n      }\n      return obj;\n    }\n\n    /**\n     * Handle an error retrieved by calling\n     * ``options.errorHandler``, passing the ``ClbError`` instance in parameter\n     * if ``options.errorHandler`` is a function.\n     * Then reject the current request with the same error instance.\n     * @param  {object} res the HTTP error object\n     * @return {Promise} rejected Promise with the error.\n     * @private\n     */\n    function handleError(res) {\n      self.error = clbError.httpError(res);\n      if (angular.isFunction(options.errorHandler)) {\n        options.errorHandler(self.error);\n      }\n      return $q.reject(self.error);\n    }\n\n    /**\n     * Configure the next page state of the result set.\n     * @param  {object} rs the last page results.\n     * @private\n     */\n    function bindNext(rs) {\n      self.nextUrl = at(rs, options.nextUrlKey);\n      self.hasNext = Boolean(self.nextUrl);\n    }\n\n    /**\n     * Configure the previous page state of the result set.\n     * @param  {object} rs the last page results.\n     * @private\n     */\n    function bindPrevious(rs) {\n      self.previousUrl = at(rs, options.previousUrlKey);\n      self.hasPrevious = Boolean(self.previousUrl);\n    }\n\n    /**\n     * Set the current count of results.\n     * @param  {object} rs the last page results.\n     * @private\n     */\n    function counting(rs) {\n      var c = at(rs, options.countKey);\n      if (angular.isDefined(c)) {\n        self.count = c;\n      }\n    }\n\n    /**\n     * Ensure that we don't mess with query result order.\n     * @param  {Function} fn the next function to run once all pending calls\n     *                       have been resolved.\n     * @return {Promise}     the promise will resolve when this function had run.\n     * @private\n     */\n    function enqueue(fn) {\n      return function() {\n        self.promise = $q\n        .when(self.promise.then(fn))\n        .catch(handleError);\n        self.promise.instance = self;\n        return self.promise;\n      };\n    }\n\n    /**\n     * Bootstrap the pagination.\n     * @param  {HTTPResponse|Promise} res Angular HTTP Response\n     * @return {ResultSet} self for chaining\n     */\n    function initialize(res) {\n      return handleNextResults(res)\n      .then(function() {\n        bindPrevious(res.data);\n        return self;\n      });\n    }\n  }\n}\n","angular.module('clb-stream')\n.directive('clbActivity', clbActivity);\n\n/**\n * @name clbActivity\n * @desc\n * ``clb-activity`` directive is displays an activity retrieved by\n * the HBP Stream service in a common way.\n *\n * It try to look up for a detailled description of the event and fallback\n * to the summary if he cannot.\n *\n * @memberof module:clb-stream\n * @return {object} the directive\n */\nfunction clbActivity() {\n  return {\n    restrict: 'A',\n    scope: {\n      activity: '=clbActivity'\n    },\n    controller: ActivityController,\n    controllerAs: 'vm',\n    bindToController: true,\n    templateUrl: 'activity.directive.html',\n    link: {\n      post: function(scope, elt, attr, ctrl) {\n        elt.addClass('clb-activity').addClass(ctrl.verbClass);\n        scope.$watch('vm.activity.verb', function(newVal) {\n          if (newVal) {\n            elt.addClass('clb-activity-' + newVal.toLowerCase());\n          }\n        });\n      }\n    }\n  };\n}\n\n/**\n * ViewModel of an activity used to render the clb-activity directive\n * @param {object} $log angular injection\n * @param {object} clbResourceLocator angular injection\n */\nfunction ActivityController($log, clbResourceLocator) {\n  var vm = this;\n\n  activate();\n\n  /* ------------- */\n  /**\n   * init controller\n   */\n  function activate() {\n    clbResourceLocator.urlFor(vm.activity.object)\n    .then(function(url) {\n      vm.primaryLink = url;\n    })\n    .catch(function(err) {\n      $log.error(err);\n    });\n  }\n}\n","angular.module('clb-stream')\n.directive('clbFeed', clbFeed);\n\n/**\n * @name clbFeed\n * @desc\n * ``clb-feed`` directive displays a feed of activity retrieved by\n * the HBP Stream service. It handles scrolling and loading of activities.\n * Each activity is rendered using the ``clb-activity`` directive.\n *\n * @memberof module:clb-stream\n * @return {object} the directive\n */\nfunction clbFeed() {\n  return {\n    restrict: 'E',\n    scope: {\n      feedType: '=clbFeedType',\n      feedId: '=clbFeedId'\n    },\n    controller: FeedController,\n    controllerAs: 'vm',\n    bindToController: true,\n    templateUrl: 'feed.directive.html',\n    link: function(scope, elt) {\n      elt.addClass('clb-feed');\n    }\n  };\n}\n\n/**\n * ViewModel of an activity used to render the clb-activity directive\n * @param {object} $log angular injection\n * @param {object} clbStream angular injection\n */\nfunction FeedController($log, clbStream) {\n  var vm = this;\n\n  activate();\n\n  /* ------------- */\n  /**\n   * init controller\n   */\n  function activate() {\n    clbStream.getStream(vm.feedType, vm.feedId).then(function(rs) {\n      vm.activities = rs;\n    })\n    .catch(function(err) {\n      vm.error = err.message;\n    });\n  }\n}\n","angular.module('clb-stream')\n.provider('clbResourceLocator', clbResourceLocatorProvider);\n\nvar urlHandlers = [];\n\n/**\n * Configure the clbResourceLocator service.\n * @return {object} An AngularJS provider instance\n */\nfunction clbResourceLocatorProvider() {\n  var provider = {\n    $get: clbResourceLocator,\n    registerUrlHandler: registerUrlHandler,\n    urlHandlers: urlHandlers\n  };\n\n  /**\n   * Add a function that can generate URL for some types of object reference.\n   *\n   * The function should return a string representing the URL.\n   * Any other response means that the handler is not able to generate a proper\n   * URL for this type of object.\n   *\n   * The function signature is ``function(objectReference) { return 'url' // or nothing}``\n   * @memberof module:clb-stream\n   * @param  {function} handler a function that can generate URL string for some objects\n   * @return {provider} The provider, for chaining.\n   */\n  function registerUrlHandler(handler) {\n    if (angular.isFunction(handler)) {\n      urlHandlers.push(handler);\n    }\n    return provider;\n  }\n\n  return provider;\n}\n\n/**\n * @name clbResourceLocator\n * @desc\n * resourceLocator service\n * @memberof module:clb-stream\n * @param {object} $q AngularJS injection\n * @param {object} $log AngularJS injection\n * @param {object} clbError AngularJS injection\n * @return {object} the service singleton\n */\nfunction clbResourceLocator($q, $log, clbError) {\n  return {\n    urlFor: urlFor\n  };\n\n  /**\n   * @desc\n   * Asynchronous resolution of an object reference to an URL that access\n   * this resource.\n   *\n   * The URL is generated using the registered URL handlers. If no URL\n   * can be generated, a HbpError is thrown with ``type==='ObjectTypeException'``.\n   * If the object reference is not valid, a HbpError is throw with\n   * ``type==='AttributeError'``. In both case ``data.ref will be set with\n   * reference for which there is an issue.\n   *\n   * @memberof module:clb-stream.clbResourceLocator\n   * @param  {object} ref object reference\n   * @return {string} a atring representing the URL for this object reference\n   */\n  function urlFor(ref) {\n    if (!validRef(ref)) {\n      return $q.reject(invalidReferenceException(ref));\n    }\n    var next = function(i) {\n      if (i < urlHandlers.length) {\n        return $q.when(urlHandlers[i](ref)).then(function(url) {\n          if (angular.isString(url)) {\n            $log.debug('generated URL', url);\n            return url;\n          }\n          if (angular.isDefined(url)) {\n            $log.warn('unexpected result from URL handler', url);\n          }\n          return next(i + 1);\n        });\n      }\n      return $q.reject(objectTypeException(ref));\n    };\n    return next(0);\n  }\n\n  /**\n   * build an objectTypeException.\n   * @private\n   * @param  {object} ref ClbObjectReference\n   * @return {HbpError}   error to be sent\n   */\n  function objectTypeException(ref) {\n    return clbError.error({\n      type: 'ObjectTypeException',\n      message: 'Unkown object type <' + (ref && ref.type) + '>',\n      data: {ref: ref}\n    });\n  }\n\n  /**\n   * build an objectTypeException.\n   * @private\n   * @param  {object} ref ClbObjectReference\n   * @return {HbpError}   error to be sent\n   */\n  function invalidReferenceException(ref) {\n    return clbError.error({\n      type: 'AttributeError',\n      message: 'Invalid object reference <' + ref + '>',\n      data: {ref: ref}\n    });\n  }\n\n  /**\n   * Return wheter the object reference is valid or not.\n   *\n   * To be valid an ObjectReference must have a defined ``id`` and ``type``\n   * @param  {any} ref the potential object reference\n   * @return {boolean} whether it is or not an object reference\n   */\n  function validRef(ref) {\n    return Boolean(ref && ref.id && ref.type);\n  }\n}\n","angular.module('clb-stream')\n.factory('clbStream', clbStream);\n\n/**\n * ``clbStream`` service is used to retrieve feed of activities\n * given a user, a collab or a specific context.\n *\n * @memberof module:clb-stream\n * @namespace clbStream\n * @param {function} $http angular dependency injection\n * @param {function} $log angular dependency injection\n * @param {function} clbEnv angular dependency injection\n * @param {function} clbError angular dependency injection\n * @param {function} clbResultSet angular dependency injection\n * @return {object} the clbActivityStream service\n */\nfunction clbStream($http, $log, clbEnv, clbError, clbResultSet) {\n  return {\n    getStream: getStream\n  };\n\n  /* -------------------- */\n\n  /**\n   * Get a feed of activities regarding an item type and id.\n   * @memberof module:clb-stream.clbStream\n   * @param  {string} type The type of object to get the feed for\n   * @param  {string|int} id   The id of the object to get the feed for\n   * @return {Promise}         resolve to the feed of activities\n   */\n  function getStream(type, id) {\n    var url = clbEnv.get('api.stream.v0') + '/stream/' +\n                         type + ':' + id + '/';\n    return clbResultSet.get($http.get(url), {\n      resultsFactory: function(results) {\n        if (!(results && results.length)) {\n          return;\n        }\n        for (var i = 0; i < results.length; i++) {\n          var activity = results[i];\n          if (activity.time) {\n            activity.time = new Date(Date.parse(activity.time));\n          }\n        }\n      }\n    })\n    .catch(clbError.rejectHttpError);\n  }\n}\n"],"sourceRoot":"/source/"}