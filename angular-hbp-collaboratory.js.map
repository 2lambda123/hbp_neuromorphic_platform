{"version":3,"sources":["main.js","app/app.module.js","datetime/datetime.module.js","form/form.module.js","storage/storage.module.js","stream/clb-stream.module.js","automator/automator.module.js","app/app.service.js","app/bootstrap.js","app/env.provider.js","datetime/moment.constant.js","datetime/time-ago.filter.js","form/form-control-focus.directive.js","form/form-group-state.directive.js","services/app-store.js","services/nav-store.js","storage/storage.service.js","stream/clb-activity.directive.js","stream/clb-feed.directive.js","stream/resource-locator.provider.js","stream/stream.service.js","automator/automator.service.js","automator/create-collab.task.js","automator/create-nav-item.task.js","automator/overview.task.js","automator/storage.task.js"],"names":[],"mappings":"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","file":"angular-hbp-collaboratory.js","sourcesContent":["/**\n * @namespace hbpCollaboratory\n * @desc\n * ``hbpCollaboratory`` module is a shell around various AngularJS modules that\n *  interface with the HBP Collaboratory.\n *\n * - :doc:`clb-app <module:clb-app>` provides utilities to retrieve current\n *   HBP Collaboratory Context in an app and to communicate with the current\n *   Collaboratory instance.\n * - :doc:`clb-automator <module:clb-automator>` to automate a serie of\n *   Collaboratory actions.\n * - :doc:`clb-feed <module:clb-feed>` retrieve and display stream of activities.\n */\nangular.module('hbpCollaboratory', [\n  'clb-automator',\n  'clb-app',\n  'clb-storage',\n  'clb-datetime',\n  'hbpCollaboratoryNavStore',\n  'hbpCollaboratoryAppStore',\n  'clb-form',\n  'clb-stream'\n]);\n","/**\n * @module clb-app\n * @desc\n * ``clb-app`` module provides utilities to retrieve current\n * HBP Collaboratory Context in an app and to communicate with the current\n * Collaboratory instance.\n *\n * This module must be bootstraped using ``angular.clbBootstrap`` function as\n * it needs to load the global environment loaded in CLB_ENBIRONMENT angular\n * constant.\n */\nangular.module('clb-app', ['hbpCommon']);\n","angular.module('clb-datetime', []);\n","/**\n * @namespace clb-form\n * @memberof hbpCollaboratory\n * @desc\n * clb-form provides directive to ease creation of forms.\n */\nangular.module('clb-form', []);\n","/**\n * @module clb-storage\n */\nangular.module('clb-storage', ['hbpCommon', 'hbpDocumentClient']);\n","/**\n * @module clb-stream\n * @desc\n * The `clb-stream` module contains a service and a few directives to retrieve\n * and display the HBP Collaboratory stream provided\n * by the various applications.\n */\n\nangular.module('clb-stream', ['bbpConfig', 'clb-datetime', 'hbpCommon']);\n","/**\n * @module clb-automator\n * @desc\n * `clb-automator` module provides an automation library for the Collaboratory\n * using the AngularJS service :ref:`clbAutomator <module-clb-automator.clbAutomator>`.\n * It supports object describing a serie of actions that have to be run\n * either concurrently or sequentially.\n *\n * It is used for example to script the creation of new custom collab in\n * the `Create New Collab` functionality in `collaboratory-extension-core`.\n */\nangular.module('clb-automator', [\n  'bbpConfig',\n  'hbpCommon',\n  'hbpDocumentClient',\n  'hbpCollaboratoryAppStore',\n  'hbpCollaboratoryNavStore',\n  'clb-storage'\n]);\n","angular.module('clb-app')\n.factory('clbApp', clbApp);\n\n/**\n * @namespace clbApp\n * @memberof module:clb-app\n * @desc\n * An AngularJS service to interface a web application with the HBP Collaboratory.\n * This library provides a few helper to work within the Collaboratory environment.\n *\n * Usage\n * -----\n *\n * - :ref:`module-clb-app.clbApp.context` is used to set and retrieve\n *   the current context.\n * - :ref:`module-clb-app.clbApp.emit` is used to send a command\n *   to the HBP Collaboratory and wait for its answer.\n *\n * @example <caption>Retrieve the current context object</caption>\n * clbApp.context()\n * .then(function(context) {\n *   console.log(context.ctx, context.state, context.collab);\n * })\n * .catch(function(err) {\n *   // Cannot set the state\n * });\n *\n * @example <caption>Set the current state in order for a user to be able to copy-paste its current URL and reopen the same collab with your app loaded at the same place.</caption>\n * clbApp.context({state: 'lorem ipsum'})\n * .then(function(context) {\n *   console.log(context.ctx, context.state, context.collab);\n * })\n * .catch(function(err) {\n *   // Cannot set the state\n * });\n *\n * @param  {object} $q AngularJS service injection\n * @param  {object} $rootScope AngularJS service injection\n * @param  {object} $timeout AngularJS service injection\n * @param  {object} $window AngularJS service injection\n * @param  {object} hbpErrorService AngularJS service injection\n * @return {object}         the service singleton\n */\nfunction clbApp(\n  $q,\n  $rootScope,\n  $timeout,\n  $window,\n  hbpErrorService\n) {\n  'use strict';\n  var eventId = 0;\n  var sentMessages = {};\n\n  /**\n   * @module hbpCollaboratoryAppToolkit\n   */\n  function AppToolkit() { }\n  AppToolkit.prototype = {\n    emit: emit,\n    context: context\n  };\n\n  $window.addEventListener('message', function(event) {\n    $rootScope.$emit('message', event.data);\n  });\n\n  $rootScope.$on('message', function(event, message) {\n    if (!message || !message.origin || !sentMessages[message.origin]) {\n      return;\n    }\n    if (message.eventName === 'resolved') {\n      sentMessages[message.origin].resolve(message.data);\n    } else if (message.eventName === 'error') {\n      sentMessages[message.origin].reject(hbpErrorService.error(message.data));\n    }\n    sentMessages[message.origin] = null;\n  });\n\n  /**\n   * Send a message to the HBP Collaboratory.\n   * @memberof module:clb-app.clbApp\n   * @param  {string} name name of the event to be propagated\n   * @param  {object} data corresponding data to be sent alongside the event\n   * @return  {Promise} resolve with the message response\n   */\n  function emit(name, data) {\n    eventId++;\n    sentMessages[eventId] = $q.defer();\n    var promise = sentMessages[eventId].promise;\n    $window.parent.postMessage({\n      apiVersion: 1,\n      eventName: name,\n      data: data,\n      ticket: eventId\n    }, '*');\n    return promise;\n  }\n\n  var currentContext;\n\n  /**\n   * @typedef HbpCollaboratoryContext\n   * @memberof module:clb-app.clbApp\n   * @type {object}\n   * @property {string} mode - the current mode, either 'run' or 'edit'\n   * @property {string} ctx - the UUID of the current context\n   * @property {string} state - an application defined state string\n   */\n\n   /**\n    * @memberof module:clb-app.clbApp\n    * @desc\n    * Asynchronously retrieve the current HBP Collaboratory Context, including\n    * the mode, the ctx UUID and the application state if any.\n    * @function context\n    * @param {object} data new values to send to HBP Collaboratory frontend\n    * @return {Promise} resolve to the context\n    * @static\n    */\n  function context(data) {\n    var d = $q.defer();\n    var kill = $timeout(function() {\n      d.reject(hbpErrorService.error({\n        type: 'TimeoutException',\n        message: 'No context can be retrieved'\n      }));\n    }, 250);\n\n    if (data) {\n      // discard context if new data should be set.\n      currentContext = null;\n    }\n\n    if (currentContext) {\n      // directly return context when cached.\n      return d.resolve(currentContext);\n    }\n    emit('workspace.context', data)\n    .then(function(context) {\n      $timeout.cancel(kill);\n      currentContext = context;\n      d.resolve(context);\n    })\n    .catch(function(err) {\n      d.reject(hbpErrorService.error(err));\n    });\n    return d.promise;\n  }\n  return new AppToolkit();\n}\n","/* global deferredBootstrapper, window, document */\n(function() {\n  'use strict';\n  angular.clbBootstrap = clbBootstrap;\n\n  /**\n   * Bootstrap AngularJS application with the environment configuration loaded.\n   * @param {string} module the name of the Angular application module to load.\n   * @param {objects} options pass those options to deferredBootstrap\n   * @return {Promise} return once the environment has been bootstrapped\n   */\n  function clbBootstrap(module, options) {\n    if (!options.env) {\n      options.env = window.bbpConfig;\n    }\n    if (!options.element) {\n      options.element = document.body;\n    }\n    options.module = module;\n    if (!options.moduleResolves) {\n      options.moduleResolves = {};\n    }\n    options.moduleResolves = [{\n      module: 'clb-app',\n      resolve: {\n        CLB_ENVIRONMENT: function($q, $http) {\n          // Remove any previously defined CLB_ENVIRONMENT\n          // As this results in unpredictable results when multiple apps\n          // use this strategy.\n          var invoker = angular.module(['clb-app'])._invokeQueue;\n          for (var i = 0; i < invoker.length; i++) {\n            var inv = invoker[i];\n            if (inv[2][0] === 'CLB_ENVIRONMENT') {\n              invoker.splice(i, 1);\n              i--;\n            }\n          }\n          if (angular.isString(options.env)) {\n            return $http.get(options.env);\n          }\n          // Set bbpConfig for backward compatibility\n          if (!window.bbpConfig) {\n            window.bbpConfig = options.env;\n          }\n          return $q.when(options.env);\n        }\n      }\n    }];\n    return deferredBootstrapper.bootstrap(options);\n  }\n})();\n","/* global window */\n\n(function() {\n  angular.module('clb-app')\n  .provider('clbEnv', clbEnv);\n\n  /**\n   * Get environement information using dotted notation.\n   * @param {object} $injector AngularJS injection\n   * @return {object} provider\n   */\n  function clbEnv($injector) {\n    var env;\n    try {\n      env = $injector.get('CLB_ENVIRONMENT');\n    } catch (ex) {\n      env = window.bbpConfig;\n    }\n    return {\n      get: get,\n      $get: function() {\n        return {\n          get: get\n        };\n      }\n    };\n\n    /**\n     * ``get(key, [defaultValue])`` provides configuration value loaded at\n     * the application bootstrap.\n     *\n     * Accept a key and an optional default\n     * value. If the key cannot be found in the configurations, it will return\n     * the provided default value. If the defaultValue is undefied, it will\n     * throw an error.\n     *\n     * To ensures that those data are available when angular bootstrap the\n     * application, use angular.clbBootstrap(module, options).\n     *\n     * @memberof module:clb-app.clbEnv\n     * @param {string} key the environment variable to retrieve, using a key.\n     * @param {any} [defaultValue] an optional default value.\n     * @return {any} the value or ``defaultValue`` if the asked for configuration\n     *               is not defined.\n     */\n    function get(key, defaultValue) {\n      var parts = key.split('.');\n      var cursor = env;\n      for (var i = 0; i < parts.length; i++) {\n        if (!(cursor && cursor.hasOwnProperty(parts[i]))) {\n          if (defaultValue !== undefined) {\n            return defaultValue;\n          }\n          throw new Error('UnkownConfigurationKey: <' + key + '>');\n        }\n        cursor = cursor[parts[i]];\n      }\n      return cursor;\n    }\n  }\n})();\n","/* global moment */\nangular.module('clb-datetime', [])\n.constant('moment', moment);\n","(function() {\n  'use strict';\n  angular.module('clb-datetime')\n  .filter('clbTimeAgo', clbTimeAgo);\n\n  /**\n   * @name clbTimeAgo\n   * @desc\n   * ``clbTimeAgo`` filter retrieves a string representing the time spent\n   * between now and the given date representation.\n   *\n   * @memberof module:clb-datetime\n   * @param  {object} moment AngularJS injection\n   * @return {function} the filter function\n   */\n  function clbTimeAgo(moment) {\n    return function(input) {\n      return moment(input).fromNow();\n    };\n  }\n})();\n","/**\n * @namespace clbFormControlFocus\n * @memberof clb-form\n * @desc\n * The ``clbFormControlFocus`` Directive mark a form element as the one that\n * should receive the focus first.\n * @example <caption>Give the focus to the search field</caption>\n * angular.module('exampleApp', ['clb-form']);\n *\n * // HTML snippet:\n * // <form ng-app=\"exampleApp\"><input type=\"search\" clb-form-control-focus></form>\n */\nangular.module('clb-form')\n.directive('clbFormControlFocus', function clbFormControlFocus($timeout) {\n  return {\n    type: 'A',\n    link: function formControlFocusLink(scope, elt) {\n      $timeout(function() {\n        elt[0].focus();\n      }, 0, false);\n    }\n  };\n});\n","/**\n * @namespace clbFormGroupState\n * @memberof clb-form\n * @desc\n * ``clbFormGroupState`` directive flag the current form group with\n * the class has-error or has-success depending on its form field\n * current state.\n *\n * @example\n * <caption>Track a field validity at the ``.form-group`` level</caption>\n * angular.module('exampleApp', ['hbpCollaboratory']);\n */\nangular.module('clb-form')\n.directive('clbFormGroupState', function formGroupState() {\n  return {\n    type: 'A',\n    scope: {\n      model: '=clbFormGroupState'\n    },\n    link: function formGroupStateLink(scope, elt) {\n      scope.$watchGroup(['model.$touched', 'model.$valid'], function() {\n        if (!scope.model) {\n          return;\n        }\n        elt.removeClass('has-error', 'has-success');\n        if (!scope.model.$touched) {\n          return;\n        }\n        if (scope.model.$valid) {\n          elt.addClass('has-success');\n        } else {\n          elt.addClass('has-error');\n        }\n      }, true);\n    }\n  };\n});\n","/* eslint camelcase: 0 */\n\n/**\n * @namespace hbpCollaboratoryAppStore\n * @memberof hbpCollaboratory\n * @desc\n * hbpCollaboratoryAppStore can be used to find and work with the\n * registered HBP Collaboratory applications.\n */\nangular.module('hbpCollaboratoryAppStore', ['bbpConfig', 'hbpCommon'])\n.constant('folderAppId', '__collab_folder__')\n.service('hbpCollaboratoryAppStore', function(\n  $q, $http, $cacheFactory,\n  hbpErrorService, bbpConfig, hbpUtil\n) {\n  var appsCache = $cacheFactory('__appsCache__');\n  var urlBase = bbpConfig.get('api.collab.v0') + '/extension/';\n  var apps = null;\n\n  /**\n   * @class App\n   * @desc client representation of an application\n   * @memberof hbpCollaboratory.hbpCollaboratoryAppStore\n   * @param  {object} [attrs] a list of attributes to set to the App instance\n   */\n  var App = function(attrs) {\n    var self = this;\n    angular.forEach(attrs, function(v, k) {\n      self[k] = v;\n    });\n  };\n  App.prototype = {\n    /**\n     * Transform an App instance into an object reprensentation compatible with\n     * the backend schema. This object can then be easily converted to a JSON\n     * string.\n     * @memberof hbpCollaboratory.hbpCollaboratoryAppStore.App\n     * @return {object} server representation of an App instance\n     */\n    toJson: function() {\n      return {\n        id: this.id,\n        description: this.description,\n        edit_url: this.editUrl,\n        run_url: this.runUrl,\n        title: this.title\n      };\n    }\n  };\n\n  /**\n   * Create an app instance from a server representation.\n   * @memberof hbpCollaboratory.hbpCollaboratoryAppStore.App\n   * @param  {object} json converted from the server JSON string\n   * @return {App} the new App instance\n   */\n  App.fromJson = function(json) {\n    /* jshint camelcase: false */\n    return new App({\n      id: json.id,\n      deleted: json.deleted,\n      description: json.description,\n      editUrl: json.edit_url,\n      runUrl: json.run_url,\n      title: json.title,\n      createdBy: json.created_by\n    });\n  };\n\n  appsCache.put('__collab_folder__', {\n    id: '__collab_folder__',\n    title: 'Folder'\n  });\n\n  var loadAll = function(promise) {\n    return promise.then(function(rs) {\n      if (rs.hasNext) {\n        return loadAll(rs.next());\n      }\n      apps = rs.results;\n      return apps;\n    });\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryAppStore\n   * @return {Promise} promise of the list of all applications\n   */\n  var list = function() {\n    if (!apps) {\n      return loadAll(hbpUtil.paginatedResultSet($http.get(urlBase), {\n        factory: App.fromJson\n      }));\n    }\n    return $q.when(apps);\n  };\n\n  /**\n   * Retrieve an App instance from its id.\n   * @param  {number} id the app id\n   * @return {Promise} promise of an app instance\n   */\n  var getById = function(id) {\n    if (!id) {\n      return $q.when(null);\n    }\n    var ext = appsCache.get(id);\n    if (ext) {\n      return $q.when(ext);\n    }\n    return $http.get(urlBase + id + '/').then(function(res) {\n      appsCache.put(id, App.fromJson(res.data));\n      return appsCache.get(id);\n    }, function(res) {\n      return $q.reject(hbpErrorService.httpError(res));\n    });\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryAppStore\n   * @param  {object} params query parameters\n   * @return {Promise} promise of an App instance\n   */\n  var findOne = function(params) {\n    return $http.get(urlBase, {params: params}).then(function(res) {\n      var results = res.data.results;\n      // Reject if more than one results\n      if (results.length > 1) {\n        return $q.reject(hbpErrorService.error({\n          type: 'TooManyResults',\n          message: 'Multiple apps has been retrieved ' +\n                   'when only one was expected.',\n          data: res.data\n        }));\n      }\n      // Null when no result\n      if (results.length === 0) {\n        return null;\n      }\n      // Build the app if exactly one result\n      var app = App.fromJson(results[0]);\n      appsCache.put(app.id, app);\n      return app;\n    }, hbpUtil.ferr);\n  };\n\n  return {\n    list: list,\n    getById: getById,\n    findOne: findOne\n  };\n});\n","/* eslint camelcase:[2, {properties: \"never\"}] */\n'use strict';\n\n/**\n * @namespace hbpCollaboratoryNavStore\n * @memberof hbpCollaboratory\n * @desc hbpCollaboratoryNavStore provides tools to create and manage\n *       navigation items.\n */\nangular.module('hbpCollaboratoryNavStore', ['hbpCommon', 'uuid4'])\n.service('hbpCollaboratoryNavStore', function($q, $http, $log,\n    $cacheFactory, $timeout, orderByFilter, uuid4,\n    hbpUtil, bbpConfig) {\n  var collabApiUrl = bbpConfig.get('api.collab.v0') + '/collab/';\n  // a cache with individual nav items\n  var cacheNavItems = $cacheFactory('navItem');\n\n  // a cache with the promises of each collab's nav tree root\n  var cacheNavRoots = $cacheFactory('navRoot');\n\n  /**\n   * @class NavItem\n   * @desc\n   * Client representation of a navigation item.\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {object} attr attributes of the new instance\n   */\n  var NavItem = function(attr) {\n    var self = this;\n    angular.forEach(attr, function(v, k) {\n      self[k] = v;\n    });\n    if (angular.isUndefined(this.context)) {\n      this.context = uuid4.generate();\n    }\n    if (angular.isUndefined(this.children)) {\n      this.children = [];\n    }\n  };\n  NavItem.prototype = {\n    /**\n     * @desc\n     * Return a server object representation that can be easily serialized\n     * to JSON and send to the backend.\n     * @memberof hbpCollaboratory.hbpCollaboratoryNavStore.NavItem\n     * @return {object} server object representation\n     */\n    toJson: function() {\n      /* jshint camelcase: false */\n      return {\n        id: this.id,\n        app_id: this.appId,\n        collab: this.collabId,\n        name: this.name,\n        context: this.context,\n        order_index: this.order,\n        type: this.type || (this.folder ? 'FO' : 'IT'),\n        parent: this.parentId\n      };\n    },\n    /**\n     * @memberof hbpCollaboratory.hbpCollaboratoryNavStore.NavItem\n     * @param  {object} attrs NavItem instance attributes\n     * @return {NavItemt} this instance\n     */\n    update: function(attrs) {\n      angular.forEach([\n        'id', 'name', 'children', 'context',\n        'collabId', 'appId', 'order', 'folder',\n        'parentId', 'type'\n      ], function(a) {\n        if (angular.isDefined(attrs[a])) {\n          this[a] = attrs[a];\n        }\n      }, this);\n\n      return this;\n    },\n    /**\n     * @memberof hbpCollaboratory.hbpCollaboratoryNavStore.NavItem\n     * @return {NavItem} this instance\n     * @private\n     */\n    ensureCached: function() {\n      cacheNavItems.put(key(this.collabId, this.id), this);\n      return this;\n    }\n  };\n  /**\n   * Manage `acc` accumulator with all the data from jsonArray and return it.\n   *\n   * @param  {int} collabId  the collab ID\n   * @param  {array} jsonArray description of the children\n   * @param  {Array} acc       the accumulator\n   * @return {Array}           the children\n   */\n  function childrenFromJson(collabId, jsonArray, acc) {\n    acc = acc || [];\n    // an undefined array means we abort the process\n    // where an empty array will ensure the resulting array\n    // is empty as well.\n    if (angular.isUndefined(jsonArray)) {\n      return acc;\n    }\n\n    acc.length = 0;\n    angular.forEach(jsonArray, function(json) {\n      acc.push(NavItem.fromJson(collabId, json));\n    });\n    return acc;\n  }\n  /**\n   * Build an instance from the server object representation.\n   *\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore.NavItem\n   * @param  {number} collabId collab ID\n   * @param  {string} json server object representation\n   * @return {NavItem} new instance of NavItem\n   */\n  NavItem.fromJson = function(collabId, json) {\n    /* jshint camelcase: false */\n    var attrs = {\n      id: json.id,\n      appId: json.app_id,\n      collabId: collabId,\n      name: json.name,\n      context: json.context,\n      order: json.order_index,\n      folder: json.type === 'FO',\n      type: json.type,\n      parentId: json.parent,\n      children: childrenFromJson(collabId, json.children)\n    };\n    var k = key(collabId, attrs.id);\n    var cached = cacheNavItems.get(k);\n    if (cached) {\n      return cached.update(attrs);\n    }\n    return new NavItem(attrs).ensureCached();\n  };\n\n  /**\n   * Retrieve the root item of the given collab.\n   *\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @return {Promise} promise the root nav item\n   */\n  var getRoot = function(collabId) {\n    var treePromise = cacheNavRoots.get(collabId);\n\n    if (!treePromise) {\n      treePromise = $http.get(collabApiUrl + collabId + '/nav/all/').then(\n        function(resp) {\n          var root;\n          var i;\n          var item;\n          var data = orderByFilter(resp.data, '+order_index');\n\n          // fill in the cache\n          for (i = 0; i !== data.length; ++i) {\n            item = NavItem.fromJson(collabId, data[i]);\n            if (item.context === 'root') {\n              root = item;\n            }\n          }\n\n          // link children and parents\n          for (i = 0; i !== data.length; ++i) {\n            item = cacheNavItems.get(key(collabId, data[i].id));\n            if (item.parentId) {\n              var parent = cacheNavItems.get(key(collabId, item.parentId));\n              parent.children.push(item);\n            }\n          }\n\n          return root;\n        },\n        hbpUtil.ferr\n      );\n\n      cacheNavRoots.put(collabId, treePromise);\n    }\n\n    return treePromise;\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @param  {number} nodeId   node ID\n   * @return {NavItem} the matching nav item\n   */\n  var getNode = function(collabId, nodeId) {\n    return getRoot(collabId).then(function() {\n      var k = key(collabId, nodeId);\n      var item = cacheNavItems.get(k);\n\n      if (!item) {\n        $log.error('unknown nav item', k);\n      }\n\n      return item;\n    });\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {str} ctx The context UUID\n   * @return {Promise}   The promise of a NavItem\n   */\n  var getNodeFromContext = function(ctx) {\n    var url = hbpUtil.format('{0}/{1}/{2}/', [\n      bbpConfig.get('api.collab.v0'),\n      'collab/context', ctx\n    ]);\n    return $http.get(url)\n    .then(function(res) {\n      var nav = NavItem.fromJson(res.data.collab.id, res.data);\n      var k = key(nav.collabId, nav.id);\n      if (cacheNavItems.get(k)) {\n        nav = cacheNavItems.get(k).update(nav);\n      } else {\n        cacheNavItems.put(k, nav);\n      }\n      return nav;\n    }, function(res) {\n      return $q.reject(hbpUtil.ferr(res));\n    });\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @param  {number} navItem  the NavItem instance to add to the navigation\n   * @return {Promise} promise of the added NavItem instance\n   */\n  var addNode = function(collabId, navItem) {\n    return $http.post(collabApiUrl + collabId + '/nav/', navItem.toJson())\n    .then(function(resp) {\n      return NavItem.fromJson(collabId, resp.data);\n    }, hbpUtil.ferr);\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @param  {NavItem} navItem the NavItem instance to remove from the navigation\n   * @return {Promise} promise of an undefined item at the end\n   */\n  var deleteNode = function(collabId, navItem) {\n    return $http.delete(collabApiUrl + collabId + '/nav/' + navItem.id + '/')\n    .then(function() {\n      cacheNavItems.remove(key(collabId, navItem.id));\n    }, hbpUtil.ferr);\n  };\n\n  /**\n   * @memberof hbpCollaboratory.hbpCollaboratoryNavStore\n   * @param  {number} collabId collab ID\n   * @param  {NavItem} navItem the instance to update\n   * @return {Promise} promise the updated instance\n   */\n  var update = function(collabId, navItem) {\n    navItem.collabId = collabId;\n    return $http.put(collabApiUrl + collabId + '/nav/' +\n      navItem.id + '/', navItem.toJson())\n    .then(function(resp) {\n      return NavItem.fromJson(collabId, resp.data);\n    }, hbpUtil.ferr);\n  };\n\n  // ordering operation needs to be globally queued to ensure consistency.\n  var insertQueue = $q.when();\n\n  /**\n   * Insert node in the three.\n   *\n   * A queue is used to ensure that the insert operation does not conflict\n   * on a single client.\n   *\n   * @param  {int} collabId   id of the collab\n   * @param  {NavItem} navItem    Nav item instance\n   * @param  {NavItem} parentItem parent item\n   * @param  {int} insertAt   add to the menu\n   * @return {Promise}        a promise that will\n   *                          return the update nav item\n   */\n  function insertNode(collabId, navItem, parentItem, insertAt) {\n    return insertQueue.then(function() {\n      // first item order_index must be 1\n      navItem.order = (insertAt === -1 ? 1 : insertAt + 1);\n      navItem.parentId = parentItem.id;\n      return update(collabId, navItem);\n    });\n  }\n\n  /**\n   * Return a unique key for chaching a nav item.\n   * @param  {int} collabId collab ID\n   * @param  {int} nodeId   NavItem ID\n   * @return {string}       the unique key\n   */\n  function key(collabId, nodeId) {\n    return collabId + '--' + nodeId;\n  }\n\n  return {\n    NavItem: NavItem,\n    getRoot: getRoot,\n    getNode: getNode,\n    getNodeFromContext: getNodeFromContext,\n    addNode: addNode,\n    saveNode: update,\n    deleteNode: deleteNode,\n    insertNode: insertNode\n  };\n});\n","/* eslint camelcase: 0 */\n/**\n * @namespace clbStorage\n * @memberof module:clb-storage\n * @desc\n * storageUtil provides utility functions to ease the interaction of apps with storage.\n */\nangular.module('clb-storage')\n.factory('clbStorage',\n  function clbStorage(hbpUtil, hbpEntityStore, hbpErrorService) {\n    /**\n     * Retrieve the key to lookup for on entities given the ctx\n     * @memberof module:clbStorage\n     * @param  {string} ctx application context UUID\n     * @return {string}     name of the entity attribute that should be used\n     * @private\n     */\n    function metadataKey(ctx) {\n      return 'ctx_' + ctx;\n    }\n\n    /**\n     * @name setContextMetadata\n     * @memberof module:clb-storage.clbStorage\n     * @desc\n     * the function links the contextId with the doc browser entity in input\n     * by setting a specific metadata on the entity.\n     *\n     * Entity object in input must contain the following properties:\n     * - _entityType\n     * - _uuid\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {Object} entity doc browser entity\n     * @param  {String} contextId collab app context id\n     * @return {Promise} a promise that resolves when the operation is completed\n     */\n    function setContextMetadata(entity, contextId) {\n      var newMetadata = {};\n      newMetadata[metadataKey(contextId)] = 1;\n\n      return hbpEntityStore.addMetadata(entity, newMetadata)\n      .catch(hbpErrorService.error);\n    }\n\n    /**\n     * @name getEntityByContext\n     * @memberof module:clb-storage.clbStorage\n     * @desc\n     * the function gets the entity linked to the contextId in input.\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {String} contextId collab app context id\n     * @return {Promise} a promise that resolves when the operation is completed\n     */\n    function getEntityByContext(contextId) {\n      var queryParams = {};\n      queryParams[metadataKey(contextId)] = 1;\n\n      return hbpEntityStore.query(queryParams).catch(hbpUtil.ferr);\n    }\n\n    /**\n     * @name deleteContextMetadata\n     * @memberof module:clb-storage.clbStorage\n     * @desc\n     * the function unlink the contextId from the entity in input\n     * by deleting the context metadata.\n     *\n     * Entity object in input must contain the following properties:\n     * - _entityType\n     * - _uuid\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {Object} entity doc browser entity\n     * @param  {String} contextId collab app context id\n     * @return {Promise} a promise that resolves when the operation is completed\n     */\n    function deleteContextMetadata(entity, contextId) {\n      var key = metadataKey(contextId);\n\n      return hbpEntityStore.deleteMetadata(entity, [key])\n      .then(null, hbpErrorService.error);\n    }\n\n    /**\n     * @name updateContextMetadata\n     * @memberof module:clb-storage.clbStorage\n     * @desc\n     * the function delete the contextId from the `oldEntity` metadata and add\n     * it as `newEntity` metadata.\n     *\n     * Entity objects in input must contain the following properties:\n     * - _entityType\n     * - _uuid\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {Object} newEntity doc browser entity to link to the context\n     * @param  {Object} oldEntity doc browser entity to unlink from the context\n     * @param  {String} contextId collab app context id\n     * @return {Promise} a promise that resolves when the operation is completed\n     */\n    function updateContextMetadata(newEntity, oldEntity, contextId) {\n      return deleteContextMetadata(oldEntity, contextId).then(function() {\n        return setContextMetadata(newEntity, contextId);\n      }).catch(hbpErrorService.error);\n    }\n\n    /**\n     * @name getProjectByCollab\n     * @memberof module:clb-storage.clbStorage\n     * @desc\n     * the function returns the storage project of the collabId in input.\n     *\n     * In case of error, the promise is rejected with a `HbpError` instance.\n     *\n     * @param  {String} collabId collab id\n     * @return {Promise} a promise that resolves to the project details\n     */\n    function getProjectByCollab(collabId) {\n      var queryParams = {\n        managed_by_collab: collabId\n      };\n      return hbpEntityStore.query(queryParams).catch(hbpUtil.ferr);\n    }\n\n    return {\n      setContextMetadata: setContextMetadata,\n      getEntityByContext: getEntityByContext,\n      deleteContextMetadata: deleteContextMetadata,\n      updateContextMetadata: updateContextMetadata,\n      getProjectByCollab: getProjectByCollab\n    };\n  });\n","(function() {\n  'use strict';\n  angular.module('clb-stream')\n  .directive('clbActivity', clbActivity);\n\n  /**\n   * @name clbActivity\n   * @desc\n   * ``clb-activity`` directive is displays an activity retrieved by\n   * the HBP Stream service in a common way.\n   *\n   * It try to look up for a detailled description of the event and fallback\n   * to the summary if he cannot.\n   *\n   * @memberof module:clb-stream\n   * @return {object} the directive\n   */\n  function clbActivity() {\n    return {\n      restrict: 'A',\n      scope: {\n        activity: '=clbActivity'\n      },\n      controller: ActivityController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'clb-activity.directive.html',\n      link: {\n        post: function(scope, elt, attr, ctrl) {\n          elt.addClass('clb-activity').addClass(ctrl.verbClass);\n          scope.$watch('vm.activity.verb', function(newVal) {\n            if (newVal) {\n              elt.addClass('clb-activity-' + newVal.toLowerCase());\n            }\n          });\n        }\n      }\n    };\n  }\n\n  /**\n   * ViewModel of an activity used to render the clb-activity directive\n   * @param {object} $log angular injection\n   * @param {object} clbResourceLocator angular injection\n   */\n  function ActivityController($log, clbResourceLocator) {\n    var vm = this;\n\n    activate();\n\n    /* ------------- */\n    /**\n     * init controller\n     */\n    function activate() {\n      clbResourceLocator.urlFor(vm.activity.object)\n      .then(function(url) {\n        vm.primaryLink = url;\n      })\n      .catch(function(err) {\n        $log.error(err);\n      });\n    }\n  }\n})();\n","(function() {\n  'use strict';\n  angular.module('clb-stream')\n  .directive('clbFeed', clbFeed);\n\n  /**\n   * @name clbFeed\n   * @desc\n   * ``clb-feed`` directive displays a feed of activity retrieved by\n   * the HBP Stream service. It handles scrolling and loading of activities.\n   * Each activity is rendered using the ``clb-activity`` directive.\n   *\n   * @memberof module:clb-stream\n   * @return {object} the directive\n   */\n  function clbFeed() {\n    return {\n      restrict: 'E',\n      scope: {\n        feedType: '=clbFeedType',\n        feedId: '=clbFeedId'\n      },\n      controller: ActivityController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'clb-feed.directive.html',\n      link: function(scope, elt) {\n        elt.addClass('clb-feed');\n      }\n    };\n  }\n\n  /**\n   * ViewModel of an activity used to render the clb-activity directive\n   * @param {object} $log angular injection\n   * @param {object} clbStream angular injection\n   */\n  function ActivityController($log, clbStream) {\n    var vm = this;\n\n    activate();\n\n    /* ------------- */\n    /**\n     * init controller\n     */\n    function activate() {\n      clbStream.getStream(vm.feedType, vm.feedId).then(function(rs) {\n        vm.activities = rs;\n      })\n      .catch(function(err) {\n        vm.error = err.message;\n      });\n    }\n  }\n})();\n","(function() {\n  'use strict';\n  angular.module('clb-stream')\n  .provider('clbResourceLocator', clbResourceLocatorProvider);\n\n  var urlHandlers = [];\n\n  /**\n   * Configure the clbResourceLocator service.\n   * @return {object} An AngularJS provider instance\n   */\n  function clbResourceLocatorProvider() {\n    var provider = {\n      $get: clbResourceLocator,\n      registerUrlHandler: registerUrlHandler,\n      urlHandlers: urlHandlers\n    };\n\n    /**\n     * Add a function that can generate URL for some types of object reference.\n     *\n     * The function should return a string representing the URL.\n     * Any other response means that the handler is not able to generate a proper\n     * URL for this type of object.\n     *\n     * The function signature is ``function(objectReference) { return 'url' // or nothing}``\n     * @memberof module:clb-stream\n     * @param  {function} handler a function that can generate URL string for some objects\n     * @return {provider} The provider, for chaining.\n     */\n    function registerUrlHandler(handler) {\n      if (angular.isFunction(handler)) {\n        urlHandlers.push(handler);\n      }\n      return provider;\n    }\n\n    return provider;\n  }\n\n  /**\n   * @name clbResourceLocator\n   * @desc\n   * resourceLocator service\n   * @memberof module:clb-stream\n   * @param {object} $q AngularJS injection\n   * @param {object} $log AngularJS injection\n   * @param {object} hbpErrorService AngularJS injection\n   * @param {object} hbpUtil AngularJS injection\n   * @return {object} the service singleton\n   */\n  function clbResourceLocator($q, $log, hbpErrorService, hbpUtil) {\n    return {\n      urlFor: urlFor\n    };\n\n    /**\n     * @desc\n     * Asynchronous resolution of an object reference to an URL that access\n     * this resource.\n     *\n     * The URL is generated using the registered URL handlers. If no URL\n     * can be generated, a HbpError is thrown with ``type==='ObjectTypeException'``.\n     * If the object reference is not valid, a HbpError is throw with\n     * ``type==='AttributeError'``. In both case ``data.ref will be set with\n     * reference for which there is an issue.\n     *\n     * @memberof module:clb-stream.clbResourceLocator\n     * @param  {object} ref object reference\n     * @return {string} a atring representing the URL for this object reference\n     */\n    function urlFor(ref) {\n      if (!validRef(ref)) {\n        return $q.reject(invalidReferenceException(ref));\n      }\n      var next = function(i) {\n        if (i < urlHandlers.length) {\n          return $q.when(urlHandlers[i](ref)).then(function(url) {\n            if (angular.isString(url)) {\n              $log.debug('generated URL', url);\n              return url;\n            }\n            if (angular.isDefined(url)) {\n              $log.warn('unexpected result from URL handler', url);\n            }\n            return next(i + 1);\n          });\n        }\n        return $q.reject(objectTypeException(ref));\n      };\n      return next(0);\n    }\n\n    /**\n     * build an objectTypeException.\n     * @private\n     * @param  {object} ref ClbObjectReference\n     * @return {HbpError}   error to be sent\n     */\n    function objectTypeException(ref) {\n      return hbpErrorService.error({\n        type: 'ObjectTypeException',\n        message: hbpUtil.format(\n          'Unkown object type <{0}>', [ref && ref.type]),\n        data: {ref: ref}\n      });\n    }\n\n    /**\n     * build an objectTypeException.\n     * @private\n     * @param  {object} ref ClbObjectReference\n     * @return {HbpError}   error to be sent\n     */\n    function invalidReferenceException(ref) {\n      return hbpErrorService.error({\n        type: 'AttributeError',\n        message: hbpUtil.format('Invalid object reference <' + ref + '>'),\n        data: {ref: ref}\n      });\n    }\n\n    /**\n     * Return wheter the object reference is valid or not.\n     *\n     * To be valid an ObjectReference must have a defined ``id`` and ``type``\n     * @param  {any} ref the potential object reference\n     * @return {boolean} whether it is or not an object reference\n     */\n    function validRef(ref) {\n      return Boolean(ref && ref.id && ref.type);\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('clb-stream')\n  .factory('clbStream', clbStream);\n\n  /**\n   * ``clbStream`` service is used to retrieve feed of activities\n   * given a user, a collab or a specific context.\n   *\n   * @memberof module:clb-stream\n   * @namespace clbStream\n   * @param {function} $http angular dependency injection\n   * @param {function} $log angular dependency injection\n   * @param {function} bbpConfig angular dependency injection\n   * @param {function} hbpUtil angular dependency injection\n   * @return {object} the clbActivityStream service\n   */\n  function clbStream($http, $log, bbpConfig, hbpUtil) {\n    return {\n      getStream: getStream\n    };\n\n    /* -------------------- */\n\n    /**\n     * Get a feed of activities regarding an item type and id.\n     * @memberof module:clb-stream.clbStream\n     * @param  {string} type The type of object to get the feed for\n     * @param  {string|int} id   The id of the object to get the feed for\n     * @return {Promise}         resolve to the feed of activities\n     */\n    function getStream(type, id) {\n      var url = hbpUtil.format('{0}/stream/{1}:{2}/', [\n        bbpConfig.get('api.stream.v0'),\n        type,\n        id\n      ]);\n      return hbpUtil.paginatedResultSet($http.get(url), {\n        resultsFactory: function(results) {\n          if (!(results && results.length)) {\n            return;\n          }\n          for (var i = 0; i < results.length; i++) {\n            var activity = results[i];\n            if (activity.time) {\n              activity.time = new Date(Date.parse(activity.time));\n            }\n          }\n        }\n      })\n      .catch(hbpUtil.ferr);\n    }\n  }\n})();\n","angular.module('clb-automator')\n.factory('clbAutomator', clbAutomator);\n\n/**\n * @namespace Tasks\n * @memberof module:clb-automator\n * @desc\n * Document a list of available tasks.\n */\n\n/**\n * @namespace clbAutomator\n * @memberof module:clb-automator\n * @desc\n * clbAutomator is an AngularJS factory that\n * provide task automation to accomplish a sequence of\n * common operation in Collaboratory.\n *\n * How to add new tasks\n * --------------------\n *\n * New tasks can be added by calling ``clbAutomator.registerHandler``.\n *\n * You can see a few example of tasks in the `tasks` folder.\n *\n * Evaluate the automator\n * ----------------------\n *\n * From the root of this project, you can start a server that will let\n * you write a descriptor and run it.\n *\n * .. code-block:: bash\n *\n *    gulp example\n *\n * @example <caption>Create a Collab with a few navigation items</caption>\n * // Create a Collab with a few navigation items.\n * angular.module('MyModule', ['clb-automator'])\n * .run(function(clbAutomator, $log) {\n *   var config = {\n *     title: 'My Custom Collab',\n *     content: 'My Collab Content',\n *     private: false\n *   };\n *   clbAutomator.task(config).run().then(function(collab) {\n *   \t $log.info('Created Collab', collab);\n *   });\n * })\n * @example <caption>Create a Collab with entities and navigation items</caption>\n * clbAutomator.run({\n *   \"collab\": {\n *     \"title\": \"Test Collab Creation\",\n *     \"content\": \"My Collab Description\",\n *     \"private\": true,\n *     \"after\": [\n *       {\n *         \"storage\": {\n *           \"entities\": {\n *             // Use one of your file UUID here.\n *             \"sample.ipynb\": \"155c1bcc-ee9c-43e2-8190-50c66befa1fa\"\n *           },\n *           \"after\": [{\n *             \"nav\": {\n *               \"name\": \"Example Code\",\n *               \"app\": \"Jupyter Notebook\",\n *               \"entity\": \"sample.ipynb\"\n *             }\n *           }]\n *         }\n *       },\n *       {\n *         \"nav\": {\n *           \"name\": \"Empty Notebook\",\n *           \"app\": \"Jupyter Notebook\"\n *         }\n *       },\n *       {\n *         \"nav\": {\n *           \"name\": \"Introduction\",\n *           \"app\": \"Rich Text Editor\"\n *         }\n *       }\n *     ]\n *   }\n * }).then(function(collab) {\n *   $log.info('Created Collab', collab);\n * });\n *\n * @example <caption>Create a Collab with a pre-filled overview</caption>\n * clbAutomator.run({\n *   \"collab\": {\n *     \"title\": \"Test Collab With Pre Filled Overview\",\n *     \"content\": \"Test collab creation with  a pre filled overview\",\n *     \"private\": true,\n *     \"after\": [{\n *       \"overview\": {\n *         // Use one of your HTML file UUID here.\n *         \"entity\": \"155c1bcc-ee9c-43e2-8190-50c66befa1fa\"\n *       }\n *     }]\n *   }\n * }).then(function(collab) {\n *   $log.info('Created Collab', collab);\n * });\n * @param {object} $q injected service\n * @param {object} $log injected service\n * @param {object} hbpErrorService injected service\n * @return {object} the clbAutomator Angular service singleton\n */\nfunction clbAutomator(\n  $q,\n  $log,\n  hbpErrorService\n) {\n  var handlers = {};\n\n  /**\n   * Register a handler function for the given task name.\n   * @memberof module:clb-automator.clb-automator\n   * @param  {string}   name handle actions with the specified name\n   * @param  {Function} fn a function that accept the current context in\n   *                       parameter.\n   */\n  function registerHandler(name, fn) {\n    handlers[name] = fn;\n  }\n\n  /**\n   * Instantiate a new Task intance that will run the code describe for\n   * a handlers with the give ``name``.\n   *\n   * The descriptor is passed to the task and parametrize it.\n   * The task context is computed at the time the task is ran. A default context\n   * can be given at load time and it will be fed with the result of each parent\n   * (but not sibling) tasks as well.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param {string} name the name of the task to instantiate\n   * @param {object} [descriptor] a configuration object that will determine\n   *                            which task to run and in which order\n   * @param {object} [descriptor.after] an array of task to run after this one\n   * @param {object} [context] a default context to run the task with\n   *\n   * @return {Task} - the new task instance\n   */\n  function task(name, descriptor, context) {\n    try {\n      return new Task(name, descriptor, context);\n    } catch (ex) {\n      $log.error('EXCEPTION', ex);\n      throw hbpErrorService.error({\n        type: 'InvalidTask',\n        message: 'Invalid task ' + name + ': ' + ex,\n        data: {\n          cause: ex,\n          name: name,\n          descriptor: descriptor,\n          context: context\n        }\n      });\n    }\n  }\n\n  /**\n   * Directly generate tasks from given description and run them.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} descriptor description of the tasks to run\n   * @param  {object} [context]  the initial context\n   * @return {Promise} promise of the top level task result\n   */\n  function run(descriptor, context) {\n    for (var name in descriptor) {\n      if (descriptor.hasOwnProperty(name)) {\n        return task(name, descriptor[name], context).run();\n      }\n    }\n    return $q.reject(hbpErrorService.error({\n      type: 'NoTaskFound',\n      message: 'No task found in descriptor',\n      data: descriptor\n    }));\n  }\n\n  /**\n   * Create an array of tasks given an array containing object where\n   * the key is the task name to run and the value is the descriptor\n   * parameter.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} after the content of ``descriptor.after``\n   * @return {Array/Task} array of subtasks\n   * @private\n   */\n  function createSubtasks(after) {\n    var subtasks = [];\n    if (!after || !after.length) {\n      return subtasks;\n    }\n    for (var i = 0; i < after.length; i++) {\n      var taskDef = after[i];\n      for (var name in taskDef) {\n        if (taskDef.hasOwnProperty(name)) {\n          subtasks.push(task(name, taskDef[name]));\n        }\n      }\n    }\n    return subtasks;\n  }\n\n  /**\n   * @class Task\n   * @memberof module:clb-automator.clbAutomator\n   * @desc\n   * Instantiate a task given the given `config`.\n   * The task can then be run using the `run()` instance method.\n   * @param {string} name the name of the task to instantiate\n   * @param {object} [descriptor] a configuration object that will determine\n   *                            which task to run and in which order\n   * @param {object} [descriptor.after] an array of task to run after this one\n   * @param {object} [context] a default context to run the task with\n   * @see module:clb-automator.task\n   *\n   */\n  function Task(name, descriptor, context) {\n    if (!handlers[name]) {\n      throw new Error('TaskNotFound');\n    }\n    descriptor = descriptor || {};\n    context = context || {};\n    this.state = 'idle';\n    this.name = name;\n    this.descriptor = descriptor;\n    this.defaultContext = context;\n    this.state = 'idle';\n    this.promise = null;\n    this.error = null;\n    this.subtasks = createSubtasks(descriptor.after);\n  }\n\n  Task.prototype = {\n    /**\n     * Launch the task.\n     *\n     * @memberof module:clb-automator.clbAutomator.Task\n     * @param {object} context current context will be merged into the default\n     *                         one.\n     * @return {Promise} promise to return the result of the task\n     */\n    run: function(context) {\n      var self = this;\n      // run an intance of task only once.\n      if (self.state !== 'idle') {\n        return self.promise;\n      }\n      context = angular.extend({}, this.defaultContext, context);\n      var onSuccess = function(result) {\n        var subContext = angular.copy(context);\n        subContext[self.name] = result;\n        return self.runSubtasks(subContext)\n        .then(function() {\n          self.state = 'success';\n          return result;\n        });\n      };\n      var onError = function(err) {\n        self.state = 'error';\n        // noop operation if is already one\n        return $q.reject(hbpErrorService.error(err));\n      };\n      self.state = 'progress';\n      self.promise = $q.when(handlers[self.name](self.descriptor, context))\n        .then(onSuccess)\n        .catch(onError);\n      return self.promise;\n    },\n\n    /**\n     * Run all subtasks of the this tasks.\n     *\n     * @memberof module:clb-automator.clbAutomator.Task\n     * @param  {object} context the current context\n     * @return {Array}          all the results in an array\n     */\n    runSubtasks: function(context) {\n      var promises = [];\n      angular.forEach(this.subtasks, function(task) {\n        promises.push(task.run(context));\n      });\n      return $q.all(promises);\n    }\n  };\n\n  /**\n   * Return a HbpError when a parameter is missing.\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {string} key    name of the key\n   * @param  {object} config the invalid configuration object\n   * @return {HbpError}      a HbpError instance\n   * @private\n   */\n  function missingDataError(key, config) {\n    return hbpErrorService({\n      type: 'KeyError',\n      message: 'Missing `' + key + '` key in config',\n      data: {\n        config: config\n      }\n    });\n  }\n\n  /**\n   * Ensure that all parameters listed after config are presents.\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} config task descriptor\n   * @return {object} created entities\n   */\n  function ensureParameters(config) {\n    var parameters = Array.prototype.splice(1);\n    for (var p in parameters) {\n      if (angular.isUndefined(parameters[p])) {\n        return $q.reject(missingDataError(p, config));\n      }\n    }\n    return $q.when(config);\n  }\n\n  /**\n   * Return an object that only contains attributes\n   * from the `attrs` list.\n   *\n   * @memberof module:clb-automator.clbAutomator\n   * @param  {object} config key-value store\n   * @param  {Array} attrs   a list of keys to extract from `config`\n   * @return {object}        key-value store containing only keys from attrs\n   *                         found in `config`\n   */\n  function extractAttributes(config, attrs) {\n    var r = {};\n    angular.forEach(attrs, function(a) {\n      if (angular.isDefined(config[a])) {\n        r[a] = config[a];\n      }\n    });\n    return r;\n  }\n\n  return {\n    run: run,\n    task: task,\n    handlers: handlers,\n    registerHandler: registerHandler,\n    extractAttributes: extractAttributes,\n    ensureParameters: ensureParameters\n  };\n}\n","angular.module('clb-automator')\n.run(function createCollab(\n  $log, $q, hbpCollabStore,\n  clbAutomator\n) {\n  clbAutomator.registerHandler('collab', createCollab);\n\n  /**\n   * @function createCollab\n   * @memberof module:clb-automator.Tasks\n   * @desc\n   *  Create a collab defined by the given options.\n   * @param {object} descriptor - Parameters to create the collab\n   * @param {string} descriptor.name - Name of the collab\n   * @param {string} descriptor.description - Description in less than 140 characters\n   *                                       of the collab\n   * @param {string} [descriptor.privacy] - 'private' or 'public'. Notes that only\n   *                                   HBP Members can create private collab\n   * @param {Array} [after] - descriptor of subtasks\n   * @return {Promise} - promise of a collab\n   */\n  function createCollab(descriptor) {\n    var attr = clbAutomator.extractAttributes(\n      descriptor,\n      ['title', 'content', 'private']\n    );\n    $log.debug('Create collab', descriptor);\n    return hbpCollabStore.create(attr);\n  }\n});\n","angular.module('clb-automator')\n.run(function createNavItem(\n  $log,\n  hbpCollaboratoryAppStore,\n  hbpCollaboratoryNavStore,\n  clbAutomator,\n  clbStorage,\n  hbpEntityStore\n) {\n  clbAutomator.registerHandler('nav', createNavItem);\n\n  /**\n   * Create a new nav item.\n   * @memberof module:clb-automator.Tasks\n   * @param {object} descriptor a descriptor description\n   * @param {string} descriptor.name name of the nav item\n   * @param {Collab} descriptor.collabId collab in which to add the item in.\n   * @param {string} descriptor.app app name linked to the nav item\n   * @param {object} [context] the current run context\n   * @param {object} [context.collab] a collab instance created previously\n   * @return {Promise} promise of a NavItem instance\n   */\n  function createNavItem(descriptor, context) {\n    var collabId = function() {\n      return (descriptor && descriptor.collab) ||\n        (context && context.collab.id);\n    };\n    var findApp = function(app) {\n      return hbpCollaboratoryAppStore.findOne({title: app});\n    };\n    var createNav = function(app) {\n      return hbpCollaboratoryNavStore.getRoot(collabId())\n      .then(function(parentItem) {\n        return hbpCollaboratoryNavStore.addNode(collabId(),\n          new hbpCollaboratoryNavStore.NavItem({\n            collab: collabId(),\n            name: descriptor.name,\n            appId: app.id,\n            parentId: parentItem.id\n          })\n        );\n      });\n    };\n    var linkToStorage = function(nav) {\n      if (!descriptor.entity) {\n        return nav;\n      }\n      var setLink = function(entity) {\n        return clbStorage.setContextMetadata(entity, nav.context)\n        .then(function() {\n          return nav;\n        });\n      };\n      // It might be the name used in a previous storage task.\n      if (context && context.storage && context.storage[descriptor.entity]) {\n        return setLink(context.storage[descriptor.entity]);\n      }\n      return hbpEntityStore.get(descriptor.entity).then(setLink);\n    };\n\n    $log.debug('Create nav item', descriptor, context);\n\n    return clbAutomator.ensureParameters(descriptor, 'app', 'name')\n    .then(function() {\n      return findApp(descriptor.app)\n      .then(createNav)\n      .then(linkToStorage);\n    });\n  }\n});\n","angular.module('clb-automator')\n.run(function createOverview(\n  $log, $q, $http, bbpConfig, hbpFileStore, hbpErrorService,\n  clbAutomator, hbpCollaboratoryNavStore, hbpCollaboratoryAppStore\n) {\n  clbAutomator.registerHandler('overview', overview);\n\n  /**\n   * Set the content of the overview page.\n   * If an 'entity' is specified, it will use the content of that storage file\n   * If an 'app' name is specified, it will use that app for the overview page\n   *\n   * The collab is indicated either by an id in `descriptor.collab` or a\n   * collab object in `context.collab`.\n   *\n   * @memberof hbpCollaboratory.hbpCollaboratoryAutomator.Tasks\n   * @param {object} descriptor the task configuration\n   * @param {object} [descriptor.collab] id of the collab\n   * @param {string} [descriptor.entity] either a label that can be found in\n   *                 ``context.entities`` or a FileEntity UUID\n   * @param {string} [descriptor.app] the name of an application\n   * @param {object} context the current task context\n   * @param {object} [context.collab] the collab in which entities will be copied\n   * @param {object} [context.entities] a list of entities to lookup in for\n   *                   descriptor.entiry value\n   * @return {object} created entities where keys are the same as provided in\n   *                  config.storage\n   */\n  function overview(descriptor, context) {\n    $log.debug(\"Set the content of the overview page\");\n    var collabId = descriptor.collab || context.collab.id;\n    var createContentFile = function(overview, descriptor, context) {\n      $log.debug(\"Fill overview page with content from entity\");\n\n      return fetchSourceContent(descriptor, context)\n        .then(function(source) {\n          return $http.post(bbpConfig.get('api.richtext.v0') + '/richtext/', {\n            ctx: overview.context,\n            raw: source\n          });\n        });\n    };\n\n    var updateAppId = function(overview, descriptor) {\n      $log.debug(\"Replace the overview page application id\");\n\n      return hbpCollaboratoryAppStore.findOne({title: descriptor.app})\n        .then(function(app) {\n          overview.update({appId: app.id});\n          return hbpCollaboratoryNavStore.saveNode(collabId, overview);\n        });\n    };\n\n    return hbpCollaboratoryNavStore\n      .getRoot(collabId)\n      .then(function(rootNav) {\n        var overview = rootNav.children[0];\n\n        var updateOverview = descriptor.app ?\n          updateAppId(overview, descriptor) :\n          createContentFile(overview, descriptor, context);\n\n        return updateOverview.then(function() {\n          return overview;\n        });\n      });\n  }\n\n  /**\n   * Download file entity content.\n   *\n   * @param {object} descriptor the task configuration\n   * @param {string} descriptor.entity either the label to find in\n   *                 ``context.entities`` or a the entity UUID.\n   * @param {object} context the current task context\n   * @param {object} context.entities optional entities in which to lookup for one\n   * @return {Promise} the promise of the entity content string\n   * @private\n   */\n  function fetchSourceContent(descriptor, context) {\n    var uuid;\n    if (context && context.entities && context.entities[descriptor.entity]) {\n      uuid = context.entities[descriptor.entity]._uuid;\n    } else {\n      uuid = descriptor.entity;\n    }\n    return hbpFileStore.getContent(uuid);\n  }\n});\n","angular.module('clb-automator')\n.run(function createStorage(\n  $log, $q, hbpEntityStore,\n  hbpErrorService,\n  clbAutomator,\n  clbStorage\n) {\n  clbAutomator.registerHandler('storage', storage);\n\n  /**\n   * Copy files and folders to the destination collab storage.\n   *\n   * @memberof module:clb-automator.Tasks\n   * @param {object} descriptor the task configuration\n   * @param {object} descriptor.storage a object where keys are the file path in the\n   *                                new collab and value are the UUID of the\n   *                                entity to copy at this path.\n   * @param {object} [descriptor.collab] id of the collab\n   * @param {object} context the current task context\n   * @param {object} [context.collab] the collab in which entities will be copied\n   * @return {object} created entities where keys are the same as provided in\n   *                  config.storage\n   */\n  function storage(descriptor, context) {\n    return clbAutomator.ensureParameters(\n      descriptor, 'entities'\n    ).then(function() {\n      return clbStorage\n        .getProjectByCollab(descriptor.collab || context.collab.id)\n        .then(function(projectEntity) {\n          var promises = {};\n          angular.forEach(descriptor.entities, function(value, name) {\n            if (angular.isString(value)) {\n              $log.debug(\"Copy entity with UUID\", value);\n              promises[name] = (\n                hbpEntityStore.copy(value, projectEntity._uuid));\n            } else {\n              $log.warn('Invalid configuration for storage task', descriptor);\n            }\n          });\n          return $q.all(promises);\n        });\n    });\n  }\n});\n"],"sourceRoot":"/source/"}